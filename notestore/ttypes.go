// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package notestore

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/dragonfax/evernote-sdk-go/errors"
	"github.com/dragonfax/evernote-sdk-go/limits"
	"github.com/dragonfax/evernote-sdk-go/types"
	"github.com/dragonfax/evernote-sdk-go/userstore"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = userstore.GoUnusedProtection__
var _ = types.GoUnusedProtection__
var _ = errors.GoUnusedProtection__
var _ = limits.GoUnusedProtection__
var GoUnusedProtection__ int

//Privilege levels for accessing shared notebooks.
//
//READ_NOTEBOOK: Recipient is able to read the contents of the shared notebook
//  but does not have access to information about other recipients of the
//  notebook or the activity stream information.
//
//READ_NOTEBOOK_PLUS_ACTIVITY: Recipient has READ_NOTEBOOK rights and can also
//  access information about other recipients and the activity stream.
//
//MODIFY_NOTEBOOK_PLUS_ACTIVITY: Recipient has rights to read and modify the contents
//  of the shared notebook, including the right to move notes to the trash and to create
//  notes in the notebook.  The recipient can also access information about other
//  recipients and the activity stream.
//
//FULL_ACCESS: Recipient has full rights to the shared notebook and recipient lists,
//  including privilege to revoke and create invitations and to change privilege
//  levels on invitations for individuals. If the user is a member of the same group,
//  (e.g. the same business) as the shared notebook, they will additionally be granted
//  permissions to update the publishing status of the notebook.
type ShareRelationshipPrivilegeLevel int64

const (
	ShareRelationshipPrivilegeLevel_READ_NOTEBOOK                 ShareRelationshipPrivilegeLevel = 0
	ShareRelationshipPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY   ShareRelationshipPrivilegeLevel = 10
	ShareRelationshipPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY ShareRelationshipPrivilegeLevel = 20
	ShareRelationshipPrivilegeLevel_FULL_ACCESS                   ShareRelationshipPrivilegeLevel = 30
)

func (p ShareRelationshipPrivilegeLevel) String() string {
	switch p {
	case ShareRelationshipPrivilegeLevel_READ_NOTEBOOK:
		return "READ_NOTEBOOK"
	case ShareRelationshipPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY:
		return "READ_NOTEBOOK_PLUS_ACTIVITY"
	case ShareRelationshipPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY:
		return "MODIFY_NOTEBOOK_PLUS_ACTIVITY"
	case ShareRelationshipPrivilegeLevel_FULL_ACCESS:
		return "FULL_ACCESS"
	}
	return "<UNSET>"
}

func ShareRelationshipPrivilegeLevelFromString(s string) (ShareRelationshipPrivilegeLevel, error) {
	switch s {
	case "READ_NOTEBOOK":
		return ShareRelationshipPrivilegeLevel_READ_NOTEBOOK, nil
	case "READ_NOTEBOOK_PLUS_ACTIVITY":
		return ShareRelationshipPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY, nil
	case "MODIFY_NOTEBOOK_PLUS_ACTIVITY":
		return ShareRelationshipPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY, nil
	case "FULL_ACCESS":
		return ShareRelationshipPrivilegeLevel_FULL_ACCESS, nil
	}
	return ShareRelationshipPrivilegeLevel(0), fmt.Errorf("not a valid ShareRelationshipPrivilegeLevel string")
}

func ShareRelationshipPrivilegeLevelPtr(v ShareRelationshipPrivilegeLevel) *ShareRelationshipPrivilegeLevel {
	return &v
}

func (p ShareRelationshipPrivilegeLevel) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ShareRelationshipPrivilegeLevel) UnmarshalText(text []byte) error {
	q, err := ShareRelationshipPrivilegeLevelFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// This structure encapsulates the information about the state of the
// user's account for the purpose of "state based" synchronization.
// <dl>
// <dt>currentTime</dt>
//   <dd>
//   The server's current date and time.
//   </dd>
// <dt>fullSyncBefore</dt>
//   <dd>
//   The cutoff date and time for client caches to be
//   updated via incremental synchronization.  Any clients that were last
//   synched with the server before this date/time must do a full resync of all
//   objects.  This cutoff point will change over time as archival data is
//   deleted or special circumstances on the service require resynchronization.
//   </dd>
// <dt>updateCount</dt>
//   <dd>
//   Indicates the total number of transactions that have
//   been committed within the account.  This reflects (for example) the
//   number of discrete additions or modifications that have been made to
//   the data in this account (tags, notes, resources, etc.).
//   This number is the "high water mark" for Update Sequence Numbers (USN)
//   within the account.
//   </dd>
// <dt>uploaded</dt>
//   <dd>
//   The total number of bytes that have been uploaded to
//   this account in the current monthly period.  This can be compared against
//   Accounting.uploadLimit (from the UserStore) to determine how close the user
//   is to their monthly upload limit.
//   This value may not be present if the SyncState has been retrieved by
//   a caller that only has read access to the account.
//   </dd>
// <dt>userLastUpdated</dt>
//   <dd>
//   The last time when a user's account level information was changed. This value
//   is the latest time when a modification was made to any of the following:
//   accounting information (billing, quota, premium status, etc.), user attributes
//   and business user information (business name, business user attributes, etc.) if
//   the user is in a business.
//   Clients who need to maintain account information about a User should watch this
//   field for updates rather than polling UserStore.getUser for updates. Here is the
//   basic flow that clients should follow:
//   <ol>
//     <li>Call NoteStore.getSyncState to retrieve the SyncState object</li>
//     <li>Compare SyncState.userLastUpdated to previously stored value:
//         if (SyncState.userLastUpdated > previousValue)
//           call UserStore.getUser to get the latest User object;
//         else
//           do nothing;</li>
//     <li>Update previousValue = SyncState.userLastUpdated</li>
//   </ol>
//   </dd>
// <dt>userMaxMessageEventId</dt>
//   <dd>
//   The greatest MessageEventID for this user's account. Clients that do a full
//   sync should store this value locally and compare their local copy to the
//   value returned by getSyncState to determine if they need to sync with
//   MessageStore. This value will be omitted if the user has never sent or
//   received a message.
//   </dd>
// </dl>
//
// Attributes:
//  - CurrentTime
//  - FullSyncBefore
//  - UpdateCount
//  - Uploaded
//  - UserLastUpdated
//  - UserMaxMessageEventId
type SyncState struct {
	CurrentTime           types.Timestamp       `thrift:"currentTime,1,required" json:"currentTime"`
	FullSyncBefore        types.Timestamp       `thrift:"fullSyncBefore,2,required" json:"fullSyncBefore"`
	UpdateCount           int32                 `thrift:"updateCount,3,required" json:"updateCount"`
	Uploaded              *int64                `thrift:"uploaded,4" json:"uploaded,omitempty"`
	UserLastUpdated       *types.Timestamp      `thrift:"userLastUpdated,5" json:"userLastUpdated,omitempty"`
	UserMaxMessageEventId *types.MessageEventID `thrift:"userMaxMessageEventId,6" json:"userMaxMessageEventId,omitempty"`
}

func NewSyncState() *SyncState {
	return &SyncState{}
}

func (p *SyncState) GetCurrentTime() types.Timestamp {
	return p.CurrentTime
}

func (p *SyncState) GetFullSyncBefore() types.Timestamp {
	return p.FullSyncBefore
}

func (p *SyncState) GetUpdateCount() int32 {
	return p.UpdateCount
}

var SyncState_Uploaded_DEFAULT int64

func (p *SyncState) GetUploaded() int64 {
	if !p.IsSetUploaded() {
		return SyncState_Uploaded_DEFAULT
	}
	return *p.Uploaded
}

var SyncState_UserLastUpdated_DEFAULT types.Timestamp

func (p *SyncState) GetUserLastUpdated() types.Timestamp {
	if !p.IsSetUserLastUpdated() {
		return SyncState_UserLastUpdated_DEFAULT
	}
	return *p.UserLastUpdated
}

var SyncState_UserMaxMessageEventId_DEFAULT types.MessageEventID

func (p *SyncState) GetUserMaxMessageEventId() types.MessageEventID {
	if !p.IsSetUserMaxMessageEventId() {
		return SyncState_UserMaxMessageEventId_DEFAULT
	}
	return *p.UserMaxMessageEventId
}
func (p *SyncState) IsSetUploaded() bool {
	return p.Uploaded != nil
}

func (p *SyncState) IsSetUserLastUpdated() bool {
	return p.UserLastUpdated != nil
}

func (p *SyncState) IsSetUserMaxMessageEventId() bool {
	return p.UserMaxMessageEventId != nil
}

func (p *SyncState) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCurrentTime bool = false
	var issetFullSyncBefore bool = false
	var issetUpdateCount bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetCurrentTime = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetFullSyncBefore = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetUpdateCount = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCurrentTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CurrentTime is not set"))
	}
	if !issetFullSyncBefore {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FullSyncBefore is not set"))
	}
	if !issetUpdateCount {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdateCount is not set"))
	}
	return nil
}

func (p *SyncState) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := types.Timestamp(v)
		p.CurrentTime = temp
	}
	return nil
}

func (p *SyncState) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.Timestamp(v)
		p.FullSyncBefore = temp
	}
	return nil
}

func (p *SyncState) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UpdateCount = v
	}
	return nil
}

func (p *SyncState) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Uploaded = &v
	}
	return nil
}

func (p *SyncState) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := types.Timestamp(v)
		p.UserLastUpdated = &temp
	}
	return nil
}

func (p *SyncState) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := types.MessageEventID(v)
		p.UserMaxMessageEventId = &temp
	}
	return nil
}

func (p *SyncState) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncState"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SyncState) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentTime", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currentTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CurrentTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentTime (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currentTime: ", p), err)
	}
	return err
}

func (p *SyncState) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fullSyncBefore", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fullSyncBefore: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FullSyncBefore)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fullSyncBefore (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fullSyncBefore: ", p), err)
	}
	return err
}

func (p *SyncState) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateCount", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updateCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UpdateCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updateCount (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updateCount: ", p), err)
	}
	return err
}

func (p *SyncState) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploaded() {
		if err := oprot.WriteFieldBegin("uploaded", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:uploaded: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Uploaded)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uploaded (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:uploaded: ", p), err)
		}
	}
	return err
}

func (p *SyncState) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserLastUpdated() {
		if err := oprot.WriteFieldBegin("userLastUpdated", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userLastUpdated: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserLastUpdated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userLastUpdated (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userLastUpdated: ", p), err)
		}
	}
	return err
}

func (p *SyncState) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserMaxMessageEventId() {
		if err := oprot.WriteFieldBegin("userMaxMessageEventId", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:userMaxMessageEventId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserMaxMessageEventId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userMaxMessageEventId (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:userMaxMessageEventId: ", p), err)
		}
	}
	return err
}

func (p *SyncState) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncState(%+v)", *p)
}

//  This structure is given out by the NoteStore when a client asks to
//  receive the current state of an account.  The client asks for the server's
//  state one chunk at a time in order to allow clients to retrieve the state
//  of a large account without needing to transfer the entire account in
//  a single message.
//
//  The server always gives SyncChunks using an ascending series of Update
//  Sequence Numbers (USNs).
//
// <dl>
//  <dt>currentTime</dt>
//    <dd>
//    The server's current date and time.
//    </dd>
//
//  <dt>chunkHighUSN</dt>
//    <dd>
//    The highest USN for any of the data objects represented
//    in this sync chunk.  If there are no objects in the chunk, this will not be
//    set.
//    </dd>
//
//  <dt>updateCount</dt>
//    <dd>
//    The total number of updates that have been performed in
//    the service for this account.  This is equal to the highest USN within the
//    account at the point that this SyncChunk was generated.  If updateCount
//    and chunkHighUSN are identical, that means that this is the last chunk
//    in the account ... there is no more recent information.
//    </dd>
//
//  <dt>notes</dt>
//    <dd>
//    If present, this is a list of non-expunged notes that
//    have a USN in this chunk.  This will include notes that are "deleted"
//    but not expunged (i.e. in the trash).  The notes will include their list
//    of tags and resources, but the note content, resource content, resource
//    recognition data and resource alternate data will not be supplied.
//    </dd>
//
//  <dt>notebooks</dt>
//    <dd>
//    If present, this is a list of non-expunged notebooks that
//    have a USN in this chunk.
//    </dd>
//
//  <dt>tags</dt>
//    <dd>
//    If present, this is a list of the non-expunged tags that have a
//    USN in this chunk.
//    </dd>
//
//  <dt>searches</dt>
//    <dd>
//    If present, this is a list of non-expunged searches that
//    have a USN in this chunk.
//    </dd>
//
//  <dt>resources</dt>
//    <dd>
//    If present, this is a list of the non-expunged resources
//    that have a USN in this chunk.  This will include the metadata for each
//    resource, but not its binary contents or recognition data, which must be
//    retrieved separately.
//    </dd>
//
//  <dt>expungedNotes</dt>
//    <dd>
//    If present, the GUIDs of all of the notes that were
//    permanently expunged in this chunk.
//    </dd>
//
//  <dt>expungedNotebooks</dt>
//    <dd>
//    If present, the GUIDs of all of the notebooks that
//    were permanently expunged in this chunk.  When a notebook is expunged,
//    this implies that all of its child notes (and their resources) were
//    also expunged.
//    </dd>
//
//  <dt>expungedTags</dt>
//    <dd>
//    If present, the GUIDs of all of the tags that were
//    permanently expunged in this chunk.
//    </dd>
//
//  <dt>expungedSearches</dt>
//    <dd>
//    If present, the GUIDs of all of the saved searches
//    that were permanently expunged in this chunk.
//    </dd>
//
//  <dt>linkedNotebooks</dt>
//    <dd>
//    If present, this is a list of non-expunged LinkedNotebooks that
//    have a USN in this chunk.
//    </dd>
//
//  <dt>expungedLinkedNotebooks</dt>
//    <dd>
//    If present, the GUIDs of all of the LinkedNotebooks
//    that were permanently expunged in this chunk.
//    </dd>
//
// Attributes:
//  - CurrentTime
//  - ChunkHighUSN
//  - UpdateCount
//  - Notes
//  - Notebooks
//  - Tags
//  - Searches
//  - Resources
//  - ExpungedNotes
//  - ExpungedNotebooks
//  - ExpungedTags
//  - ExpungedSearches
//  - LinkedNotebooks
//  - ExpungedLinkedNotebooks
type SyncChunk struct {
	CurrentTime             types.Timestamp         `thrift:"currentTime,1,required" json:"currentTime"`
	ChunkHighUSN            *int32                  `thrift:"chunkHighUSN,2" json:"chunkHighUSN,omitempty"`
	UpdateCount             int32                   `thrift:"updateCount,3,required" json:"updateCount"`
	Notes                   []*types.Note           `thrift:"notes,4" json:"notes,omitempty"`
	Notebooks               []*types.Notebook       `thrift:"notebooks,5" json:"notebooks,omitempty"`
	Tags                    []*types.Tag            `thrift:"tags,6" json:"tags,omitempty"`
	Searches                []*types.SavedSearch    `thrift:"searches,7" json:"searches,omitempty"`
	Resources               []*types.Resource       `thrift:"resources,8" json:"resources,omitempty"`
	ExpungedNotes           []string                `thrift:"expungedNotes,9" json:"expungedNotes,omitempty"`
	ExpungedNotebooks       []string                `thrift:"expungedNotebooks,10" json:"expungedNotebooks,omitempty"`
	ExpungedTags            []string                `thrift:"expungedTags,11" json:"expungedTags,omitempty"`
	ExpungedSearches        []string                `thrift:"expungedSearches,12" json:"expungedSearches,omitempty"`
	LinkedNotebooks         []*types.LinkedNotebook `thrift:"linkedNotebooks,13" json:"linkedNotebooks,omitempty"`
	ExpungedLinkedNotebooks []string                `thrift:"expungedLinkedNotebooks,14" json:"expungedLinkedNotebooks,omitempty"`
}

func NewSyncChunk() *SyncChunk {
	return &SyncChunk{}
}

func (p *SyncChunk) GetCurrentTime() types.Timestamp {
	return p.CurrentTime
}

var SyncChunk_ChunkHighUSN_DEFAULT int32

func (p *SyncChunk) GetChunkHighUSN() int32 {
	if !p.IsSetChunkHighUSN() {
		return SyncChunk_ChunkHighUSN_DEFAULT
	}
	return *p.ChunkHighUSN
}

func (p *SyncChunk) GetUpdateCount() int32 {
	return p.UpdateCount
}

var SyncChunk_Notes_DEFAULT []*types.Note

func (p *SyncChunk) GetNotes() []*types.Note {
	return p.Notes
}

var SyncChunk_Notebooks_DEFAULT []*types.Notebook

func (p *SyncChunk) GetNotebooks() []*types.Notebook {
	return p.Notebooks
}

var SyncChunk_Tags_DEFAULT []*types.Tag

func (p *SyncChunk) GetTags() []*types.Tag {
	return p.Tags
}

var SyncChunk_Searches_DEFAULT []*types.SavedSearch

func (p *SyncChunk) GetSearches() []*types.SavedSearch {
	return p.Searches
}

var SyncChunk_Resources_DEFAULT []*types.Resource

func (p *SyncChunk) GetResources() []*types.Resource {
	return p.Resources
}

var SyncChunk_ExpungedNotes_DEFAULT []string

func (p *SyncChunk) GetExpungedNotes() []string {
	return p.ExpungedNotes
}

var SyncChunk_ExpungedNotebooks_DEFAULT []string

func (p *SyncChunk) GetExpungedNotebooks() []string {
	return p.ExpungedNotebooks
}

var SyncChunk_ExpungedTags_DEFAULT []string

func (p *SyncChunk) GetExpungedTags() []string {
	return p.ExpungedTags
}

var SyncChunk_ExpungedSearches_DEFAULT []string

func (p *SyncChunk) GetExpungedSearches() []string {
	return p.ExpungedSearches
}

var SyncChunk_LinkedNotebooks_DEFAULT []*types.LinkedNotebook

func (p *SyncChunk) GetLinkedNotebooks() []*types.LinkedNotebook {
	return p.LinkedNotebooks
}

var SyncChunk_ExpungedLinkedNotebooks_DEFAULT []string

func (p *SyncChunk) GetExpungedLinkedNotebooks() []string {
	return p.ExpungedLinkedNotebooks
}
func (p *SyncChunk) IsSetChunkHighUSN() bool {
	return p.ChunkHighUSN != nil
}

func (p *SyncChunk) IsSetNotes() bool {
	return p.Notes != nil
}

func (p *SyncChunk) IsSetNotebooks() bool {
	return p.Notebooks != nil
}

func (p *SyncChunk) IsSetTags() bool {
	return p.Tags != nil
}

func (p *SyncChunk) IsSetSearches() bool {
	return p.Searches != nil
}

func (p *SyncChunk) IsSetResources() bool {
	return p.Resources != nil
}

func (p *SyncChunk) IsSetExpungedNotes() bool {
	return p.ExpungedNotes != nil
}

func (p *SyncChunk) IsSetExpungedNotebooks() bool {
	return p.ExpungedNotebooks != nil
}

func (p *SyncChunk) IsSetExpungedTags() bool {
	return p.ExpungedTags != nil
}

func (p *SyncChunk) IsSetExpungedSearches() bool {
	return p.ExpungedSearches != nil
}

func (p *SyncChunk) IsSetLinkedNotebooks() bool {
	return p.LinkedNotebooks != nil
}

func (p *SyncChunk) IsSetExpungedLinkedNotebooks() bool {
	return p.ExpungedLinkedNotebooks != nil
}

func (p *SyncChunk) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCurrentTime bool = false
	var issetUpdateCount bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetCurrentTime = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetUpdateCount = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCurrentTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CurrentTime is not set"))
	}
	if !issetUpdateCount {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdateCount is not set"))
	}
	return nil
}

func (p *SyncChunk) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := types.Timestamp(v)
		p.CurrentTime = temp
	}
	return nil
}

func (p *SyncChunk) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChunkHighUSN = &v
	}
	return nil
}

func (p *SyncChunk) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UpdateCount = v
	}
	return nil
}

func (p *SyncChunk) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.Note, 0, size)
	p.Notes = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &types.Note{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Notes = append(p.Notes, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SyncChunk) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.Notebook, 0, size)
	p.Notebooks = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &types.Notebook{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Notebooks = append(p.Notebooks, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SyncChunk) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.Tag, 0, size)
	p.Tags = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &types.Tag{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Tags = append(p.Tags, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SyncChunk) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.SavedSearch, 0, size)
	p.Searches = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &types.SavedSearch{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.Searches = append(p.Searches, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SyncChunk) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.Resource, 0, size)
	p.Resources = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &types.Resource{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.Resources = append(p.Resources, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SyncChunk) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ExpungedNotes = tSlice
	for i := 0; i < size; i++ {
		var _elem5 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem5 = v
		}
		p.ExpungedNotes = append(p.ExpungedNotes, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SyncChunk) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ExpungedNotebooks = tSlice
	for i := 0; i < size; i++ {
		var _elem6 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem6 = v
		}
		p.ExpungedNotebooks = append(p.ExpungedNotebooks, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SyncChunk) readField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ExpungedTags = tSlice
	for i := 0; i < size; i++ {
		var _elem7 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem7 = v
		}
		p.ExpungedTags = append(p.ExpungedTags, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SyncChunk) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ExpungedSearches = tSlice
	for i := 0; i < size; i++ {
		var _elem8 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem8 = v
		}
		p.ExpungedSearches = append(p.ExpungedSearches, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SyncChunk) readField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.LinkedNotebook, 0, size)
	p.LinkedNotebooks = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &types.LinkedNotebook{}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.LinkedNotebooks = append(p.LinkedNotebooks, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SyncChunk) readField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ExpungedLinkedNotebooks = tSlice
	for i := 0; i < size; i++ {
		var _elem10 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem10 = v
		}
		p.ExpungedLinkedNotebooks = append(p.ExpungedLinkedNotebooks, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SyncChunk) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncChunk"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SyncChunk) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentTime", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currentTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CurrentTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentTime (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currentTime: ", p), err)
	}
	return err
}

func (p *SyncChunk) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetChunkHighUSN() {
		if err := oprot.WriteFieldBegin("chunkHighUSN", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chunkHighUSN: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ChunkHighUSN)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.chunkHighUSN (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chunkHighUSN: ", p), err)
		}
	}
	return err
}

func (p *SyncChunk) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateCount", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updateCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UpdateCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updateCount (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updateCount: ", p), err)
	}
	return err
}

func (p *SyncChunk) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotes() {
		if err := oprot.WriteFieldBegin("notes", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:notes: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notes)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Notes {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:notes: ", p), err)
		}
	}
	return err
}

func (p *SyncChunk) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebooks() {
		if err := oprot.WriteFieldBegin("notebooks", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:notebooks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notebooks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Notebooks {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:notebooks: ", p), err)
		}
	}
	return err
}

func (p *SyncChunk) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err := oprot.WriteFieldBegin("tags", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tags: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Tags {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tags: ", p), err)
		}
	}
	return err
}

func (p *SyncChunk) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSearches() {
		if err := oprot.WriteFieldBegin("searches", thrift.LIST, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:searches: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Searches)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Searches {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:searches: ", p), err)
		}
	}
	return err
}

func (p *SyncChunk) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetResources() {
		if err := oprot.WriteFieldBegin("resources", thrift.LIST, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:resources: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resources)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Resources {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:resources: ", p), err)
		}
	}
	return err
}

func (p *SyncChunk) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpungedNotes() {
		if err := oprot.WriteFieldBegin("expungedNotes", thrift.LIST, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:expungedNotes: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedNotes)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExpungedNotes {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:expungedNotes: ", p), err)
		}
	}
	return err
}

func (p *SyncChunk) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpungedNotebooks() {
		if err := oprot.WriteFieldBegin("expungedNotebooks", thrift.LIST, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:expungedNotebooks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedNotebooks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExpungedNotebooks {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:expungedNotebooks: ", p), err)
		}
	}
	return err
}

func (p *SyncChunk) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpungedTags() {
		if err := oprot.WriteFieldBegin("expungedTags", thrift.LIST, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:expungedTags: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedTags)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExpungedTags {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:expungedTags: ", p), err)
		}
	}
	return err
}

func (p *SyncChunk) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpungedSearches() {
		if err := oprot.WriteFieldBegin("expungedSearches", thrift.LIST, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:expungedSearches: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedSearches)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExpungedSearches {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:expungedSearches: ", p), err)
		}
	}
	return err
}

func (p *SyncChunk) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetLinkedNotebooks() {
		if err := oprot.WriteFieldBegin("linkedNotebooks", thrift.LIST, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:linkedNotebooks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LinkedNotebooks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.LinkedNotebooks {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:linkedNotebooks: ", p), err)
		}
	}
	return err
}

func (p *SyncChunk) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpungedLinkedNotebooks() {
		if err := oprot.WriteFieldBegin("expungedLinkedNotebooks", thrift.LIST, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:expungedLinkedNotebooks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedLinkedNotebooks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExpungedLinkedNotebooks {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:expungedLinkedNotebooks: ", p), err)
		}
	}
	return err
}

func (p *SyncChunk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncChunk(%+v)", *p)
}

//  This structure is used with the 'getFilteredSyncChunk' call to provide
//  fine-grained control over the data that's returned when a client needs
//  to synchronize with the service. Each flag in this structure specifies
//  whether to include one class of data in the results of that call.
//
// <dl>
//  <dt>includeNotes</dt>
//    <dd>
//    If true, then the server will include the SyncChunks.notes field
//    </dd>
//
//  <dt>includeNoteResources</dt>
//    <dd>
//    If true, then the server will include the 'resources' field on all of
//    the Notes that are in SyncChunk.notes.
//    If 'includeNotes' is false, then this will have no effect.
//    </dd>
//
//  <dt>includeNoteAttributes</dt>
//    <dd>
//    If true, then the server will include the 'attributes' field on all of
//    the Notes that are in SyncChunks.notes.
//    If 'includeNotes' is false, then this will have no effect.
//    </dd>
//
//  <dt>includeNotebooks</dt>
//    <dd>
//    If true, then the server will include the SyncChunks.notebooks field
//    </dd>
//
//  <dt>includeTags</dt>
//    <dd>
//    If true, then the server will include the SyncChunks.tags field
//    </dd>
//
//  <dt>includeSearches</dt>
//    <dd>
//    If true, then the server will include the SyncChunks.searches field
//    </dd>
//
//  <dt>includeResources</dt>
//    <dd>
//    If true, then the server will include the SyncChunks.resources field.
//    Since the Resources are also provided with their Note
//    (in the Notes.resources list), this is primarily useful for clients that
//    want to watch for changes to individual Resources due to recognition data
//    being added.
//    </dd>
//
//  <dt>includeLinkedNotebooks</dt>
//    <dd>
//    If true, then the server will include the SyncChunks.linkedNotebooks field.
//    </dd>
//
//  <dt>includeExpunged</dt>
//    <dd>
//    If true, then the server will include the 'expunged' data for any type
//    of included data.  For example, if 'includeTags' and 'includeExpunged'
//    are both true, then the SyncChunks.expungedTags field will be set with
//    the GUIDs of tags that have been expunged from the server.
//    </dd>
//
//  <dt>includeNoteApplicationDataFullMap</dt>
//    <dd>
//    If true, then the values for the applicationData map will be filled
//    in, assuming notes and note attributes are being returned.  Otherwise,
//    only the keysOnly field will be filled in.
//    </dd>
//
//  <dt>includeResourceApplicationDataFullMap</dt>
//    <dd>
//    If true, then the fullMap values for the applicationData map will be
//    filled in, assuming resources and resource attributes are being returned
//    (includeResources is true).  Otherwise, only the keysOnly field will be
//    filled in.
//    </dd>
//
//  <dt>includeNoteResourceApplicationDataFullMap</dt>
//    <dd>
//    If true, then the fullMap values for the applicationData map will be
//    filled in for resources found inside of notes, assuming resources are
//    being returned in notes (includeNoteResources is true).  Otherwise,
//    only the keysOnly field will be filled in.
//    </dd>
//
//  <dt>omitSharedNotebooks<dt>
//    <dd>
//    Normally, if 'includeNotebooks' is true, then the SyncChunks will
//    include Notebooks that may include a set of SharedNotebook
//    invitations via Notebook.sharedNotebookIds and Notebook.sharedNotebooks.
//    However, if omitSharedNotebooks is set to true, then the Notebooks
//    will omit those two fields and leave them unset. This should be used
//    by clients who want to know their own set of Notebooks (and the
//    associated permissions via Notebook.recipientSettings), and who
//    do not need to know the full set of other people who can also see
//    that same notebook.
//    </dd>
//
//  <dt>requireNoteContentClass</dt>
//    <dd>
//    If set, then only send notes whose content class matches this value.
//    The value can be a literal match or, if the last character is an
//    asterisk, a prefix match.
//    </dd>
//
//  <dt>notebookGuids</dt>
//    <dd>
//    If set, then restrict the returned notebooks, notes, and
//    resources to those associated with one of the notebooks whose
//    GUID is provided in this list.  If not set, then no filtering on
//    notebook GUID will be performed.  If you set this field, you may
//    not also set includeExpunged else an EDAMUserException with an
//    error code of DATA_CONFLICT will be thrown.  You only need to set
//    this field if you want to restrict the returned entities more
//    than what your authentication token allows you to access.  For
//    example, there is no need to set this field for single notebook
//    tokens such as for shared notebooks.  You can use this field to
//    synchronize a newly discovered business notebook while
//    incrementally synchronizing a business account, in which case you
//    will only need to consider setting includeNotes,
//    includeNotebooks, includeNoteAttributes, includeNoteResources,
//    and maybe some of the "FullMap" fields.
//    </dd>
//
//  <dt>includeSharedNotes</dt>
//    <dd>
//    If true, then the service will include the sharedNotes field on all
//    notes that are in SyncChunk.notes. If 'includeNotes' is false, then
//    this will have no effect.
//    </dd>
//  </dl>
//
// Attributes:
//  - IncludeNotes
//  - IncludeNoteResources
//  - IncludeNoteAttributes
//  - IncludeNotebooks
//  - IncludeTags
//  - IncludeSearches
//  - IncludeResources
//  - IncludeLinkedNotebooks
//  - IncludeExpunged
//  - IncludeNoteApplicationDataFullMap
//  - IncludeResourceApplicationDataFullMap
//  - IncludeNoteResourceApplicationDataFullMap
//  - IncludeSharedNotes
//  - OmitSharedNotebooks
//  - RequireNoteContentClass
//  - NotebookGuids
type SyncChunkFilter struct {
	IncludeNotes                              *bool   `thrift:"includeNotes,1" json:"includeNotes,omitempty"`
	IncludeNoteResources                      *bool   `thrift:"includeNoteResources,2" json:"includeNoteResources,omitempty"`
	IncludeNoteAttributes                     *bool   `thrift:"includeNoteAttributes,3" json:"includeNoteAttributes,omitempty"`
	IncludeNotebooks                          *bool   `thrift:"includeNotebooks,4" json:"includeNotebooks,omitempty"`
	IncludeTags                               *bool   `thrift:"includeTags,5" json:"includeTags,omitempty"`
	IncludeSearches                           *bool   `thrift:"includeSearches,6" json:"includeSearches,omitempty"`
	IncludeResources                          *bool   `thrift:"includeResources,7" json:"includeResources,omitempty"`
	IncludeLinkedNotebooks                    *bool   `thrift:"includeLinkedNotebooks,8" json:"includeLinkedNotebooks,omitempty"`
	IncludeExpunged                           *bool   `thrift:"includeExpunged,9" json:"includeExpunged,omitempty"`
	IncludeNoteApplicationDataFullMap         *bool   `thrift:"includeNoteApplicationDataFullMap,10" json:"includeNoteApplicationDataFullMap,omitempty"`
	RequireNoteContentClass                   *string `thrift:"requireNoteContentClass,11" json:"requireNoteContentClass,omitempty"`
	IncludeResourceApplicationDataFullMap     *bool   `thrift:"includeResourceApplicationDataFullMap,12" json:"includeResourceApplicationDataFullMap,omitempty"`
	IncludeNoteResourceApplicationDataFullMap *bool   `thrift:"includeNoteResourceApplicationDataFullMap,13" json:"includeNoteResourceApplicationDataFullMap,omitempty"`
	// unused field # 14
	NotebookGuids       map[string]bool `thrift:"notebookGuids,15" json:"notebookGuids,omitempty"`
	OmitSharedNotebooks *bool           `thrift:"omitSharedNotebooks,16" json:"omitSharedNotebooks,omitempty"`
	IncludeSharedNotes  *bool           `thrift:"includeSharedNotes,17" json:"includeSharedNotes,omitempty"`
}

func NewSyncChunkFilter() *SyncChunkFilter {
	return &SyncChunkFilter{}
}

var SyncChunkFilter_IncludeNotes_DEFAULT bool

func (p *SyncChunkFilter) GetIncludeNotes() bool {
	if !p.IsSetIncludeNotes() {
		return SyncChunkFilter_IncludeNotes_DEFAULT
	}
	return *p.IncludeNotes
}

var SyncChunkFilter_IncludeNoteResources_DEFAULT bool

func (p *SyncChunkFilter) GetIncludeNoteResources() bool {
	if !p.IsSetIncludeNoteResources() {
		return SyncChunkFilter_IncludeNoteResources_DEFAULT
	}
	return *p.IncludeNoteResources
}

var SyncChunkFilter_IncludeNoteAttributes_DEFAULT bool

func (p *SyncChunkFilter) GetIncludeNoteAttributes() bool {
	if !p.IsSetIncludeNoteAttributes() {
		return SyncChunkFilter_IncludeNoteAttributes_DEFAULT
	}
	return *p.IncludeNoteAttributes
}

var SyncChunkFilter_IncludeNotebooks_DEFAULT bool

func (p *SyncChunkFilter) GetIncludeNotebooks() bool {
	if !p.IsSetIncludeNotebooks() {
		return SyncChunkFilter_IncludeNotebooks_DEFAULT
	}
	return *p.IncludeNotebooks
}

var SyncChunkFilter_IncludeTags_DEFAULT bool

func (p *SyncChunkFilter) GetIncludeTags() bool {
	if !p.IsSetIncludeTags() {
		return SyncChunkFilter_IncludeTags_DEFAULT
	}
	return *p.IncludeTags
}

var SyncChunkFilter_IncludeSearches_DEFAULT bool

func (p *SyncChunkFilter) GetIncludeSearches() bool {
	if !p.IsSetIncludeSearches() {
		return SyncChunkFilter_IncludeSearches_DEFAULT
	}
	return *p.IncludeSearches
}

var SyncChunkFilter_IncludeResources_DEFAULT bool

func (p *SyncChunkFilter) GetIncludeResources() bool {
	if !p.IsSetIncludeResources() {
		return SyncChunkFilter_IncludeResources_DEFAULT
	}
	return *p.IncludeResources
}

var SyncChunkFilter_IncludeLinkedNotebooks_DEFAULT bool

func (p *SyncChunkFilter) GetIncludeLinkedNotebooks() bool {
	if !p.IsSetIncludeLinkedNotebooks() {
		return SyncChunkFilter_IncludeLinkedNotebooks_DEFAULT
	}
	return *p.IncludeLinkedNotebooks
}

var SyncChunkFilter_IncludeExpunged_DEFAULT bool

func (p *SyncChunkFilter) GetIncludeExpunged() bool {
	if !p.IsSetIncludeExpunged() {
		return SyncChunkFilter_IncludeExpunged_DEFAULT
	}
	return *p.IncludeExpunged
}

var SyncChunkFilter_IncludeNoteApplicationDataFullMap_DEFAULT bool

func (p *SyncChunkFilter) GetIncludeNoteApplicationDataFullMap() bool {
	if !p.IsSetIncludeNoteApplicationDataFullMap() {
		return SyncChunkFilter_IncludeNoteApplicationDataFullMap_DEFAULT
	}
	return *p.IncludeNoteApplicationDataFullMap
}

var SyncChunkFilter_IncludeResourceApplicationDataFullMap_DEFAULT bool

func (p *SyncChunkFilter) GetIncludeResourceApplicationDataFullMap() bool {
	if !p.IsSetIncludeResourceApplicationDataFullMap() {
		return SyncChunkFilter_IncludeResourceApplicationDataFullMap_DEFAULT
	}
	return *p.IncludeResourceApplicationDataFullMap
}

var SyncChunkFilter_IncludeNoteResourceApplicationDataFullMap_DEFAULT bool

func (p *SyncChunkFilter) GetIncludeNoteResourceApplicationDataFullMap() bool {
	if !p.IsSetIncludeNoteResourceApplicationDataFullMap() {
		return SyncChunkFilter_IncludeNoteResourceApplicationDataFullMap_DEFAULT
	}
	return *p.IncludeNoteResourceApplicationDataFullMap
}

var SyncChunkFilter_IncludeSharedNotes_DEFAULT bool

func (p *SyncChunkFilter) GetIncludeSharedNotes() bool {
	if !p.IsSetIncludeSharedNotes() {
		return SyncChunkFilter_IncludeSharedNotes_DEFAULT
	}
	return *p.IncludeSharedNotes
}

var SyncChunkFilter_OmitSharedNotebooks_DEFAULT bool

func (p *SyncChunkFilter) GetOmitSharedNotebooks() bool {
	if !p.IsSetOmitSharedNotebooks() {
		return SyncChunkFilter_OmitSharedNotebooks_DEFAULT
	}
	return *p.OmitSharedNotebooks
}

var SyncChunkFilter_RequireNoteContentClass_DEFAULT string

func (p *SyncChunkFilter) GetRequireNoteContentClass() string {
	if !p.IsSetRequireNoteContentClass() {
		return SyncChunkFilter_RequireNoteContentClass_DEFAULT
	}
	return *p.RequireNoteContentClass
}

var SyncChunkFilter_NotebookGuids_DEFAULT map[string]bool

func (p *SyncChunkFilter) GetNotebookGuids() map[string]bool {
	return p.NotebookGuids
}
func (p *SyncChunkFilter) IsSetIncludeNotes() bool {
	return p.IncludeNotes != nil
}

func (p *SyncChunkFilter) IsSetIncludeNoteResources() bool {
	return p.IncludeNoteResources != nil
}

func (p *SyncChunkFilter) IsSetIncludeNoteAttributes() bool {
	return p.IncludeNoteAttributes != nil
}

func (p *SyncChunkFilter) IsSetIncludeNotebooks() bool {
	return p.IncludeNotebooks != nil
}

func (p *SyncChunkFilter) IsSetIncludeTags() bool {
	return p.IncludeTags != nil
}

func (p *SyncChunkFilter) IsSetIncludeSearches() bool {
	return p.IncludeSearches != nil
}

func (p *SyncChunkFilter) IsSetIncludeResources() bool {
	return p.IncludeResources != nil
}

func (p *SyncChunkFilter) IsSetIncludeLinkedNotebooks() bool {
	return p.IncludeLinkedNotebooks != nil
}

func (p *SyncChunkFilter) IsSetIncludeExpunged() bool {
	return p.IncludeExpunged != nil
}

func (p *SyncChunkFilter) IsSetIncludeNoteApplicationDataFullMap() bool {
	return p.IncludeNoteApplicationDataFullMap != nil
}

func (p *SyncChunkFilter) IsSetIncludeResourceApplicationDataFullMap() bool {
	return p.IncludeResourceApplicationDataFullMap != nil
}

func (p *SyncChunkFilter) IsSetIncludeNoteResourceApplicationDataFullMap() bool {
	return p.IncludeNoteResourceApplicationDataFullMap != nil
}

func (p *SyncChunkFilter) IsSetIncludeSharedNotes() bool {
	return p.IncludeSharedNotes != nil
}

func (p *SyncChunkFilter) IsSetOmitSharedNotebooks() bool {
	return p.OmitSharedNotebooks != nil
}

func (p *SyncChunkFilter) IsSetRequireNoteContentClass() bool {
	return p.RequireNoteContentClass != nil
}

func (p *SyncChunkFilter) IsSetNotebookGuids() bool {
	return p.NotebookGuids != nil
}

func (p *SyncChunkFilter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SyncChunkFilter) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IncludeNotes = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IncludeNoteResources = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IncludeNoteAttributes = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IncludeNotebooks = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IncludeTags = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.IncludeSearches = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.IncludeResources = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.IncludeLinkedNotebooks = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.IncludeExpunged = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.IncludeNoteApplicationDataFullMap = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.IncludeResourceApplicationDataFullMap = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.IncludeNoteResourceApplicationDataFullMap = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.IncludeSharedNotes = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.OmitSharedNotebooks = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.RequireNoteContentClass = &v
	}
	return nil
}

func (p *SyncChunkFilter) readField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.NotebookGuids = tSet
	for i := 0; i < size; i++ {
		var _elem11 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem11 = v
		}
		p.NotebookGuids[_elem11] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *SyncChunkFilter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncChunkFilter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SyncChunkFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNotes() {
		if err := oprot.WriteFieldBegin("includeNotes", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:includeNotes: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeNotes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeNotes (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:includeNotes: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteResources() {
		if err := oprot.WriteFieldBegin("includeNoteResources", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:includeNoteResources: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeNoteResources)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeNoteResources (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:includeNoteResources: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteAttributes() {
		if err := oprot.WriteFieldBegin("includeNoteAttributes", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:includeNoteAttributes: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeNoteAttributes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeNoteAttributes (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:includeNoteAttributes: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNotebooks() {
		if err := oprot.WriteFieldBegin("includeNotebooks", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:includeNotebooks: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeNotebooks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeNotebooks (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:includeNotebooks: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeTags() {
		if err := oprot.WriteFieldBegin("includeTags", thrift.BOOL, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:includeTags: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeTags)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeTags (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:includeTags: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeSearches() {
		if err := oprot.WriteFieldBegin("includeSearches", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:includeSearches: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeSearches)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeSearches (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:includeSearches: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResources() {
		if err := oprot.WriteFieldBegin("includeResources", thrift.BOOL, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:includeResources: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeResources)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeResources (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:includeResources: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeLinkedNotebooks() {
		if err := oprot.WriteFieldBegin("includeLinkedNotebooks", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:includeLinkedNotebooks: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeLinkedNotebooks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeLinkedNotebooks (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:includeLinkedNotebooks: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeExpunged() {
		if err := oprot.WriteFieldBegin("includeExpunged", thrift.BOOL, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:includeExpunged: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeExpunged)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeExpunged (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:includeExpunged: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteApplicationDataFullMap() {
		if err := oprot.WriteFieldBegin("includeNoteApplicationDataFullMap", thrift.BOOL, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:includeNoteApplicationDataFullMap: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeNoteApplicationDataFullMap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeNoteApplicationDataFullMap (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:includeNoteApplicationDataFullMap: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequireNoteContentClass() {
		if err := oprot.WriteFieldBegin("requireNoteContentClass", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:requireNoteContentClass: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RequireNoteContentClass)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requireNoteContentClass (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:requireNoteContentClass: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResourceApplicationDataFullMap() {
		if err := oprot.WriteFieldBegin("includeResourceApplicationDataFullMap", thrift.BOOL, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:includeResourceApplicationDataFullMap: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeResourceApplicationDataFullMap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeResourceApplicationDataFullMap (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:includeResourceApplicationDataFullMap: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteResourceApplicationDataFullMap() {
		if err := oprot.WriteFieldBegin("includeNoteResourceApplicationDataFullMap", thrift.BOOL, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:includeNoteResourceApplicationDataFullMap: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeNoteResourceApplicationDataFullMap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeNoteResourceApplicationDataFullMap (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:includeNoteResourceApplicationDataFullMap: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuids() {
		if err := oprot.WriteFieldBegin("notebookGuids", thrift.SET, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:notebookGuids: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.NotebookGuids)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.NotebookGuids {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:notebookGuids: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetOmitSharedNotebooks() {
		if err := oprot.WriteFieldBegin("omitSharedNotebooks", thrift.BOOL, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:omitSharedNotebooks: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.OmitSharedNotebooks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.omitSharedNotebooks (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:omitSharedNotebooks: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeSharedNotes() {
		if err := oprot.WriteFieldBegin("includeSharedNotes", thrift.BOOL, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:includeSharedNotes: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeSharedNotes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeSharedNotes (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:includeSharedNotes: ", p), err)
		}
	}
	return err
}

func (p *SyncChunkFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncChunkFilter(%+v)", *p)
}

//  A list of criteria that are used to indicate which notes are desired from
//  the account.  This is used in queries to the NoteStore to determine
//  which notes should be retrieved.
//
// <dl>
//  <dt>order</dt>
//    <dd>
//    The NoteSortOrder value indicating what criterion should be
//    used to sort the results of the filter.
//    </dd>
//
//  <dt>ascending</dt>
//    <dd>
//    If true, the results will be ascending in the requested
//    sort order.  If false, the results will be descending.
//    </dd>
//
//  <dt>words</dt>
//    <dd>
//    If present, a search query string that will filter the set of notes to be returned.
//    Accepts the full search grammar documented in the Evernote API Overview.
//    </dd>
//
//  <dt>notebookGuid</dt>
//    <dd>
//    If present, the Guid of the notebook that must contain
//    the notes.
//    </dd>
//
//  <dt>tagGuids</dt>
//    <dd>
//    If present, the list of tags (by GUID) that must be present
//    on the notes.
//    </dd>
//
//  <dt>timeZone</dt>
//    <dd>
//    The zone ID for the user, which will be used to interpret
//    any dates or times in the queries that do not include their desired zone
//    information.
//    For example, if a query requests notes created "yesterday", this
//    will be evaluated from the provided time zone, if provided.
//    The format must be encoded as a standard zone ID such as
//    "America/Los_Angeles".
//    </dd>
//
//  <dt>inactive</dt>
//    <dd>
//    If true, then only notes that are not active (i.e. notes in
//    the Trash) will be returned. Otherwise, only active notes will be returned.
//    There is no way to find both active and inactive notes in a single query.
//    </dd>
//
//  <dt>emphasized</dt>
//    <dd>
//    If present, a search query string that may or may not influence the notes
//    to be returned, both in terms of coverage as well as of order. Think of it
//    as a wish list, not a requirement.
//    Accepts the full search grammar documented in the Evernote API Overview.
//    </dd>
//
//  <dt>includeAllReadableNotebooks</dt>
//    <dd>
//    If true, then the search will include all business notebooks that are readable
//    by the user. A business authentication token must be supplied for
//    this option to take effect when calling search APIs.
//    </dd>
//
//  <dt>context</dt>
//  <dd>Specifies the context to consider when determining result ranking.
//      Clients must leave this value unset unless they wish to explicitly specify a known
//      non-default context.
//  </dd>
//
//  </dl>
//
// Attributes:
//  - Order
//  - Ascending
//  - Words
//  - NotebookGuid
//  - TagGuids
//  - TimeZone
//  - Inactive
//  - Emphasized
//  - IncludeAllReadableNotebooks
//  - Context
type NoteFilter struct {
	Order                       *int32      `thrift:"order,1" json:"order,omitempty"`
	Ascending                   *bool       `thrift:"ascending,2" json:"ascending,omitempty"`
	Words                       *string     `thrift:"words,3" json:"words,omitempty"`
	NotebookGuid                *types.GUID `thrift:"notebookGuid,4" json:"notebookGuid,omitempty"`
	TagGuids                    []string    `thrift:"tagGuids,5" json:"tagGuids,omitempty"`
	TimeZone                    *string     `thrift:"timeZone,6" json:"timeZone,omitempty"`
	Inactive                    *bool       `thrift:"inactive,7" json:"inactive,omitempty"`
	Emphasized                  *string     `thrift:"emphasized,8" json:"emphasized,omitempty"`
	IncludeAllReadableNotebooks *bool       `thrift:"includeAllReadableNotebooks,9" json:"includeAllReadableNotebooks,omitempty"`
	Context                     *string     `thrift:"context,10" json:"context,omitempty"`
}

func NewNoteFilter() *NoteFilter {
	return &NoteFilter{}
}

var NoteFilter_Order_DEFAULT int32

func (p *NoteFilter) GetOrder() int32 {
	if !p.IsSetOrder() {
		return NoteFilter_Order_DEFAULT
	}
	return *p.Order
}

var NoteFilter_Ascending_DEFAULT bool

func (p *NoteFilter) GetAscending() bool {
	if !p.IsSetAscending() {
		return NoteFilter_Ascending_DEFAULT
	}
	return *p.Ascending
}

var NoteFilter_Words_DEFAULT string

func (p *NoteFilter) GetWords() string {
	if !p.IsSetWords() {
		return NoteFilter_Words_DEFAULT
	}
	return *p.Words
}

var NoteFilter_NotebookGuid_DEFAULT types.GUID

func (p *NoteFilter) GetNotebookGuid() types.GUID {
	if !p.IsSetNotebookGuid() {
		return NoteFilter_NotebookGuid_DEFAULT
	}
	return *p.NotebookGuid
}

var NoteFilter_TagGuids_DEFAULT []string

func (p *NoteFilter) GetTagGuids() []string {
	return p.TagGuids
}

var NoteFilter_TimeZone_DEFAULT string

func (p *NoteFilter) GetTimeZone() string {
	if !p.IsSetTimeZone() {
		return NoteFilter_TimeZone_DEFAULT
	}
	return *p.TimeZone
}

var NoteFilter_Inactive_DEFAULT bool

func (p *NoteFilter) GetInactive() bool {
	if !p.IsSetInactive() {
		return NoteFilter_Inactive_DEFAULT
	}
	return *p.Inactive
}

var NoteFilter_Emphasized_DEFAULT string

func (p *NoteFilter) GetEmphasized() string {
	if !p.IsSetEmphasized() {
		return NoteFilter_Emphasized_DEFAULT
	}
	return *p.Emphasized
}

var NoteFilter_IncludeAllReadableNotebooks_DEFAULT bool

func (p *NoteFilter) GetIncludeAllReadableNotebooks() bool {
	if !p.IsSetIncludeAllReadableNotebooks() {
		return NoteFilter_IncludeAllReadableNotebooks_DEFAULT
	}
	return *p.IncludeAllReadableNotebooks
}

var NoteFilter_Context_DEFAULT string

func (p *NoteFilter) GetContext() string {
	if !p.IsSetContext() {
		return NoteFilter_Context_DEFAULT
	}
	return *p.Context
}
func (p *NoteFilter) IsSetOrder() bool {
	return p.Order != nil
}

func (p *NoteFilter) IsSetAscending() bool {
	return p.Ascending != nil
}

func (p *NoteFilter) IsSetWords() bool {
	return p.Words != nil
}

func (p *NoteFilter) IsSetNotebookGuid() bool {
	return p.NotebookGuid != nil
}

func (p *NoteFilter) IsSetTagGuids() bool {
	return p.TagGuids != nil
}

func (p *NoteFilter) IsSetTimeZone() bool {
	return p.TimeZone != nil
}

func (p *NoteFilter) IsSetInactive() bool {
	return p.Inactive != nil
}

func (p *NoteFilter) IsSetEmphasized() bool {
	return p.Emphasized != nil
}

func (p *NoteFilter) IsSetIncludeAllReadableNotebooks() bool {
	return p.IncludeAllReadableNotebooks != nil
}

func (p *NoteFilter) IsSetContext() bool {
	return p.Context != nil
}

func (p *NoteFilter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteFilter) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Order = &v
	}
	return nil
}

func (p *NoteFilter) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Ascending = &v
	}
	return nil
}

func (p *NoteFilter) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Words = &v
	}
	return nil
}

func (p *NoteFilter) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := types.GUID(v)
		p.NotebookGuid = &temp
	}
	return nil
}

func (p *NoteFilter) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.TagGuids = tSlice
	for i := 0; i < size; i++ {
		var _elem12 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem12 = v
		}
		p.TagGuids = append(p.TagGuids, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteFilter) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.TimeZone = &v
	}
	return nil
}

func (p *NoteFilter) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Inactive = &v
	}
	return nil
}

func (p *NoteFilter) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Emphasized = &v
	}
	return nil
}

func (p *NoteFilter) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.IncludeAllReadableNotebooks = &v
	}
	return nil
}

func (p *NoteFilter) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Context = &v
	}
	return nil
}

func (p *NoteFilter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteFilter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrder() {
		if err := oprot.WriteFieldBegin("order", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:order: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Order)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.order (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:order: ", p), err)
		}
	}
	return err
}

func (p *NoteFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAscending() {
		if err := oprot.WriteFieldBegin("ascending", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ascending: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Ascending)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ascending (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ascending: ", p), err)
		}
	}
	return err
}

func (p *NoteFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWords() {
		if err := oprot.WriteFieldBegin("words", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:words: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Words)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.words (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:words: ", p), err)
		}
	}
	return err
}

func (p *NoteFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:notebookGuid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NotebookGuid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.notebookGuid (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:notebookGuid: ", p), err)
		}
	}
	return err
}

func (p *NoteFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagGuids() {
		if err := oprot.WriteFieldBegin("tagGuids", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tagGuids: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.TagGuids)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagGuids {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tagGuids: ", p), err)
		}
	}
	return err
}

func (p *NoteFilter) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeZone() {
		if err := oprot.WriteFieldBegin("timeZone", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timeZone: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TimeZone)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timeZone (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timeZone: ", p), err)
		}
	}
	return err
}

func (p *NoteFilter) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetInactive() {
		if err := oprot.WriteFieldBegin("inactive", thrift.BOOL, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:inactive: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Inactive)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.inactive (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:inactive: ", p), err)
		}
	}
	return err
}

func (p *NoteFilter) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmphasized() {
		if err := oprot.WriteFieldBegin("emphasized", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:emphasized: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Emphasized)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.emphasized (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:emphasized: ", p), err)
		}
	}
	return err
}

func (p *NoteFilter) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeAllReadableNotebooks() {
		if err := oprot.WriteFieldBegin("includeAllReadableNotebooks", thrift.BOOL, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:includeAllReadableNotebooks: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeAllReadableNotebooks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeAllReadableNotebooks (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:includeAllReadableNotebooks: ", p), err)
		}
	}
	return err
}

func (p *NoteFilter) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetContext() {
		if err := oprot.WriteFieldBegin("context", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:context: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Context)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.context (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:context: ", p), err)
		}
	}
	return err
}

func (p *NoteFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteFilter(%+v)", *p)
}

//  A small structure for returning a list of notes out of a larger set.
//
// <dl>
//  <dt>startIndex</dt>
//    <dd>
//    The starting index within the overall set of notes.  This
//    is also the number of notes that are "before" this list in the set.
//    </dd>
//
//  <dt>totalNotes</dt>
//    <dd>
//    The number of notes in the larger set.  This can be used
//    to calculate how many notes are "after" this note in the set.
//    (I.e.  remaining = totalNotes - (startIndex + notes.length)  )
//    </dd>
//
//  <dt>notes</dt>
//    <dd>
//    The list of notes from this range.  The Notes will include all
//    metadata (attributes, resources, etc.), but will not include the ENML
//    content of the note or the binary contents of any resources.
//    </dd>
//
//  <dt>stoppedWords</dt>
//    <dd>
//    If the NoteList was produced using a text based search
//    query that included words that are not indexed or searched by the service,
//    this will include a list of those ignored words.
//    </dd>
//
//  <dt>searchedWords</dt>
//    <dd>
//    If the NoteList was produced using a text based search
//    query that included viable search words or quoted expressions, this will
//    include a list of those words.  Any stopped words will not be included
//    in this list.
//    </dd>
//
//  <dt>updateCount</dt>
//    <dd>
//    Indicates the total number of transactions that have
//    been committed within the account.  This reflects (for example) the
//    number of discrete additions or modifications that have been made to
//    the data in this account (tags, notes, resources, etc.).
//    This number is the "high water mark" for Update Sequence Numbers (USN)
//    within the account.
//    </dd>
//  </dl>
//
// Attributes:
//  - StartIndex
//  - TotalNotes
//  - Notes
//  - StoppedWords
//  - SearchedWords
//  - UpdateCount
type NoteList struct {
	StartIndex    int32         `thrift:"startIndex,1,required" json:"startIndex"`
	TotalNotes    int32         `thrift:"totalNotes,2,required" json:"totalNotes"`
	Notes         []*types.Note `thrift:"notes,3,required" json:"notes"`
	StoppedWords  []string      `thrift:"stoppedWords,4" json:"stoppedWords,omitempty"`
	SearchedWords []string      `thrift:"searchedWords,5" json:"searchedWords,omitempty"`
	UpdateCount   *int32        `thrift:"updateCount,6" json:"updateCount,omitempty"`
}

func NewNoteList() *NoteList {
	return &NoteList{}
}

func (p *NoteList) GetStartIndex() int32 {
	return p.StartIndex
}

func (p *NoteList) GetTotalNotes() int32 {
	return p.TotalNotes
}

func (p *NoteList) GetNotes() []*types.Note {
	return p.Notes
}

var NoteList_StoppedWords_DEFAULT []string

func (p *NoteList) GetStoppedWords() []string {
	return p.StoppedWords
}

var NoteList_SearchedWords_DEFAULT []string

func (p *NoteList) GetSearchedWords() []string {
	return p.SearchedWords
}

var NoteList_UpdateCount_DEFAULT int32

func (p *NoteList) GetUpdateCount() int32 {
	if !p.IsSetUpdateCount() {
		return NoteList_UpdateCount_DEFAULT
	}
	return *p.UpdateCount
}
func (p *NoteList) IsSetStoppedWords() bool {
	return p.StoppedWords != nil
}

func (p *NoteList) IsSetSearchedWords() bool {
	return p.SearchedWords != nil
}

func (p *NoteList) IsSetUpdateCount() bool {
	return p.UpdateCount != nil
}

func (p *NoteList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStartIndex bool = false
	var issetTotalNotes bool = false
	var issetNotes bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStartIndex = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetTotalNotes = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetNotes = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStartIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartIndex is not set"))
	}
	if !issetTotalNotes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalNotes is not set"))
	}
	if !issetNotes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Notes is not set"))
	}
	return nil
}

func (p *NoteList) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *NoteList) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalNotes = v
	}
	return nil
}

func (p *NoteList) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.Note, 0, size)
	p.Notes = tSlice
	for i := 0; i < size; i++ {
		_elem13 := &types.Note{}
		if err := _elem13.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
		}
		p.Notes = append(p.Notes, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteList) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.StoppedWords = tSlice
	for i := 0; i < size; i++ {
		var _elem14 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem14 = v
		}
		p.StoppedWords = append(p.StoppedWords, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteList) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.SearchedWords = tSlice
	for i := 0; i < size; i++ {
		var _elem15 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem15 = v
		}
		p.SearchedWords = append(p.SearchedWords, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteList) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.UpdateCount = &v
	}
	return nil
}

func (p *NoteList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startIndex (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startIndex: ", p), err)
	}
	return err
}

func (p *NoteList) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalNotes", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalNotes: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalNotes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalNotes (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalNotes: ", p), err)
	}
	return err
}

func (p *NoteList) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notes", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Notes {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notes: ", p), err)
	}
	return err
}

func (p *NoteList) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoppedWords() {
		if err := oprot.WriteFieldBegin("stoppedWords", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stoppedWords: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.StoppedWords)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.StoppedWords {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stoppedWords: ", p), err)
		}
	}
	return err
}

func (p *NoteList) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSearchedWords() {
		if err := oprot.WriteFieldBegin("searchedWords", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:searchedWords: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SearchedWords)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SearchedWords {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:searchedWords: ", p), err)
		}
	}
	return err
}

func (p *NoteList) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateCount() {
		if err := oprot.WriteFieldBegin("updateCount", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:updateCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UpdateCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateCount (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:updateCount: ", p), err)
		}
	}
	return err
}

func (p *NoteList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteList(%+v)", *p)
}

// This structure is used in the set of results returned by the
// findNotesMetadata function.  It represents the high-level information about
// a single Note, without some of the larger deep structure.  This allows
// for the information about a list of Notes to be returned relatively quickly
// with less marshalling and data transfer to remote clients.
// Most fields in this structure are identical to the corresponding field in
// the Note structure, with the exception of:
//
// <dl>
// <dt>largestResourceMime</dt>
//   <dd>If set, then this will contain the MIME type of the largest Resource
//   (in bytes) within the Note.  This may be useful, for example, to choose
//   an appropriate icon or thumbnail to represent the Note.
//   </dd>
//
// <dt>largestResourceSize</dt>
//  <dd>If set, this will contain the size of the largest Resource file, in
//  bytes, within the Note.  This may be useful, for example, to decide whether
//  to ask the server for a thumbnail to represent the Note.
//  </dd>
// </dl>
//
// Attributes:
//  - GUID
//  - Title
//  - ContentLength
//  - Created
//  - Updated
//  - Deleted
//  - UpdateSequenceNum
//  - NotebookGuid
//  - TagGuids
//  - Attributes
//  - LargestResourceMime
//  - LargestResourceSize
type NoteMetadata struct {
	GUID  types.GUID `thrift:"guid,1,required" json:"guid"`
	Title *string    `thrift:"title,2" json:"title,omitempty"`
	// unused fields # 3 to 4
	ContentLength *int32           `thrift:"contentLength,5" json:"contentLength,omitempty"`
	Created       *types.Timestamp `thrift:"created,6" json:"created,omitempty"`
	Updated       *types.Timestamp `thrift:"updated,7" json:"updated,omitempty"`
	Deleted       *types.Timestamp `thrift:"deleted,8" json:"deleted,omitempty"`
	// unused field # 9
	UpdateSequenceNum *int32   `thrift:"updateSequenceNum,10" json:"updateSequenceNum,omitempty"`
	NotebookGuid      *string  `thrift:"notebookGuid,11" json:"notebookGuid,omitempty"`
	TagGuids          []string `thrift:"tagGuids,12" json:"tagGuids,omitempty"`
	// unused field # 13
	Attributes *types.NoteAttributes `thrift:"attributes,14" json:"attributes,omitempty"`
	// unused fields # 15 to 19
	LargestResourceMime *string `thrift:"largestResourceMime,20" json:"largestResourceMime,omitempty"`
	LargestResourceSize *int32  `thrift:"largestResourceSize,21" json:"largestResourceSize,omitempty"`
}

func NewNoteMetadata() *NoteMetadata {
	return &NoteMetadata{}
}

func (p *NoteMetadata) GetGUID() types.GUID {
	return p.GUID
}

var NoteMetadata_Title_DEFAULT string

func (p *NoteMetadata) GetTitle() string {
	if !p.IsSetTitle() {
		return NoteMetadata_Title_DEFAULT
	}
	return *p.Title
}

var NoteMetadata_ContentLength_DEFAULT int32

func (p *NoteMetadata) GetContentLength() int32 {
	if !p.IsSetContentLength() {
		return NoteMetadata_ContentLength_DEFAULT
	}
	return *p.ContentLength
}

var NoteMetadata_Created_DEFAULT types.Timestamp

func (p *NoteMetadata) GetCreated() types.Timestamp {
	if !p.IsSetCreated() {
		return NoteMetadata_Created_DEFAULT
	}
	return *p.Created
}

var NoteMetadata_Updated_DEFAULT types.Timestamp

func (p *NoteMetadata) GetUpdated() types.Timestamp {
	if !p.IsSetUpdated() {
		return NoteMetadata_Updated_DEFAULT
	}
	return *p.Updated
}

var NoteMetadata_Deleted_DEFAULT types.Timestamp

func (p *NoteMetadata) GetDeleted() types.Timestamp {
	if !p.IsSetDeleted() {
		return NoteMetadata_Deleted_DEFAULT
	}
	return *p.Deleted
}

var NoteMetadata_UpdateSequenceNum_DEFAULT int32

func (p *NoteMetadata) GetUpdateSequenceNum() int32 {
	if !p.IsSetUpdateSequenceNum() {
		return NoteMetadata_UpdateSequenceNum_DEFAULT
	}
	return *p.UpdateSequenceNum
}

var NoteMetadata_NotebookGuid_DEFAULT string

func (p *NoteMetadata) GetNotebookGuid() string {
	if !p.IsSetNotebookGuid() {
		return NoteMetadata_NotebookGuid_DEFAULT
	}
	return *p.NotebookGuid
}

var NoteMetadata_TagGuids_DEFAULT []string

func (p *NoteMetadata) GetTagGuids() []string {
	return p.TagGuids
}

var NoteMetadata_Attributes_DEFAULT *types.NoteAttributes

func (p *NoteMetadata) GetAttributes() *types.NoteAttributes {
	if !p.IsSetAttributes() {
		return NoteMetadata_Attributes_DEFAULT
	}
	return p.Attributes
}

var NoteMetadata_LargestResourceMime_DEFAULT string

func (p *NoteMetadata) GetLargestResourceMime() string {
	if !p.IsSetLargestResourceMime() {
		return NoteMetadata_LargestResourceMime_DEFAULT
	}
	return *p.LargestResourceMime
}

var NoteMetadata_LargestResourceSize_DEFAULT int32

func (p *NoteMetadata) GetLargestResourceSize() int32 {
	if !p.IsSetLargestResourceSize() {
		return NoteMetadata_LargestResourceSize_DEFAULT
	}
	return *p.LargestResourceSize
}
func (p *NoteMetadata) IsSetTitle() bool {
	return p.Title != nil
}

func (p *NoteMetadata) IsSetContentLength() bool {
	return p.ContentLength != nil
}

func (p *NoteMetadata) IsSetCreated() bool {
	return p.Created != nil
}

func (p *NoteMetadata) IsSetUpdated() bool {
	return p.Updated != nil
}

func (p *NoteMetadata) IsSetDeleted() bool {
	return p.Deleted != nil
}

func (p *NoteMetadata) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != nil
}

func (p *NoteMetadata) IsSetNotebookGuid() bool {
	return p.NotebookGuid != nil
}

func (p *NoteMetadata) IsSetTagGuids() bool {
	return p.TagGuids != nil
}

func (p *NoteMetadata) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *NoteMetadata) IsSetLargestResourceMime() bool {
	return p.LargestResourceMime != nil
}

func (p *NoteMetadata) IsSetLargestResourceSize() bool {
	return p.LargestResourceSize != nil
}

func (p *NoteMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetGUID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetGUID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetGUID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GUID is not set"))
	}
	return nil
}

func (p *NoteMetadata) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteMetadata) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *NoteMetadata) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ContentLength = &v
	}
	return nil
}

func (p *NoteMetadata) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := types.Timestamp(v)
		p.Created = &temp
	}
	return nil
}

func (p *NoteMetadata) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := types.Timestamp(v)
		p.Updated = &temp
	}
	return nil
}

func (p *NoteMetadata) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := types.Timestamp(v)
		p.Deleted = &temp
	}
	return nil
}

func (p *NoteMetadata) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.UpdateSequenceNum = &v
	}
	return nil
}

func (p *NoteMetadata) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.NotebookGuid = &v
	}
	return nil
}

func (p *NoteMetadata) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.TagGuids = tSlice
	for i := 0; i < size; i++ {
		var _elem16 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem16 = v
		}
		p.TagGuids = append(p.TagGuids, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteMetadata) readField14(iprot thrift.TProtocol) error {
	p.Attributes = &types.NoteAttributes{}
	if err := p.Attributes.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Attributes), err)
	}
	return nil
}

func (p *NoteMetadata) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.LargestResourceMime = &v
	}
	return nil
}

func (p *NoteMetadata) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.LargestResourceSize = &v
	}
	return nil
}

func (p *NoteMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteMetadata"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err)
	}
	return err
}

func (p *NoteMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentLength() {
		if err := oprot.WriteFieldBegin("contentLength", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contentLength: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ContentLength)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.contentLength (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contentLength: ", p), err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreated() {
		if err := oprot.WriteFieldBegin("created", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:created: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Created)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.created (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:created: ", p), err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdated() {
		if err := oprot.WriteFieldBegin("updated", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:updated: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Updated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updated (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:updated: ", p), err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleted() {
		if err := oprot.WriteFieldBegin("deleted", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:deleted: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Deleted)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.deleted (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:deleted: ", p), err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:updateSequenceNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:updateSequenceNum: ", p), err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:notebookGuid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NotebookGuid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.notebookGuid (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:notebookGuid: ", p), err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagGuids() {
		if err := oprot.WriteFieldBegin("tagGuids", thrift.LIST, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:tagGuids: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.TagGuids)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagGuids {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:tagGuids: ", p), err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:attributes: ", p), err)
		}
		if err := p.Attributes.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Attributes), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:attributes: ", p), err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetLargestResourceMime() {
		if err := oprot.WriteFieldBegin("largestResourceMime", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:largestResourceMime: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LargestResourceMime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.largestResourceMime (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:largestResourceMime: ", p), err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetLargestResourceSize() {
		if err := oprot.WriteFieldBegin("largestResourceSize", thrift.I32, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:largestResourceSize: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.LargestResourceSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.largestResourceSize (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:largestResourceSize: ", p), err)
		}
	}
	return err
}

func (p *NoteMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteMetadata(%+v)", *p)
}

//  This structure is returned from calls to the findNotesMetadata function to
//  give the high-level metadata about a subset of Notes that are found to
//  match a specified NoteFilter in a search.
//
// <dl>
//  <dt>startIndex</dt>
//    <dd>
//    The starting index within the overall set of notes.  This
//    is also the number of notes that are "before" this list in the set.
//    </dd>
//
//  <dt>totalNotes</dt>
//    <dd>
//    The number of notes in the larger set.  This can be used
//    to calculate how many notes are "after" this note in the set.
//    (I.e.  remaining = totalNotes - (startIndex + notes.length)  )
//    </dd>
//
//  <dt>notes</dt>
//    <dd>
//    The list of metadata for Notes in this range.  The set of optional fields
//    that are set in each metadata structure will depend on the
//    NotesMetadataResultSpec provided by the caller when the search was
//    performed.  Only the 'guid' field will be guaranteed to be set in each
//    Note.
//    </dd>
//
//  <dt>stoppedWords</dt>
//    <dd>
//    If the NoteList was produced using a text based search
//    query that included words that are not indexed or searched by the service,
//    this will include a list of those ignored words.
//    </dd>
//
//  <dt>searchedWords</dt>
//    <dd>
//    If the NoteList was produced using a text based search
//    query that included viable search words or quoted expressions, this will
//    include a list of those words.  Any stopped words will not be included
//    in this list.
//    </dd>
//
//  <dt>updateCount</dt>
//    <dd>
//    Indicates the total number of transactions that have
//    been committed within the account.  This reflects (for example) the
//    number of discrete additions or modifications that have been made to
//    the data in this account (tags, notes, resources, etc.).
//    This number is the "high water mark" for Update Sequence Numbers (USN)
//    within the account.
//    </dd>
//  </dl>
//
// Attributes:
//  - StartIndex
//  - TotalNotes
//  - Notes
//  - StoppedWords
//  - SearchedWords
//  - UpdateCount
type NotesMetadataList struct {
	StartIndex    int32           `thrift:"startIndex,1,required" json:"startIndex"`
	TotalNotes    int32           `thrift:"totalNotes,2,required" json:"totalNotes"`
	Notes         []*NoteMetadata `thrift:"notes,3,required" json:"notes"`
	StoppedWords  []string        `thrift:"stoppedWords,4" json:"stoppedWords,omitempty"`
	SearchedWords []string        `thrift:"searchedWords,5" json:"searchedWords,omitempty"`
	UpdateCount   *int32          `thrift:"updateCount,6" json:"updateCount,omitempty"`
}

func NewNotesMetadataList() *NotesMetadataList {
	return &NotesMetadataList{}
}

func (p *NotesMetadataList) GetStartIndex() int32 {
	return p.StartIndex
}

func (p *NotesMetadataList) GetTotalNotes() int32 {
	return p.TotalNotes
}

func (p *NotesMetadataList) GetNotes() []*NoteMetadata {
	return p.Notes
}

var NotesMetadataList_StoppedWords_DEFAULT []string

func (p *NotesMetadataList) GetStoppedWords() []string {
	return p.StoppedWords
}

var NotesMetadataList_SearchedWords_DEFAULT []string

func (p *NotesMetadataList) GetSearchedWords() []string {
	return p.SearchedWords
}

var NotesMetadataList_UpdateCount_DEFAULT int32

func (p *NotesMetadataList) GetUpdateCount() int32 {
	if !p.IsSetUpdateCount() {
		return NotesMetadataList_UpdateCount_DEFAULT
	}
	return *p.UpdateCount
}
func (p *NotesMetadataList) IsSetStoppedWords() bool {
	return p.StoppedWords != nil
}

func (p *NotesMetadataList) IsSetSearchedWords() bool {
	return p.SearchedWords != nil
}

func (p *NotesMetadataList) IsSetUpdateCount() bool {
	return p.UpdateCount != nil
}

func (p *NotesMetadataList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStartIndex bool = false
	var issetTotalNotes bool = false
	var issetNotes bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStartIndex = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetTotalNotes = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetNotes = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStartIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartIndex is not set"))
	}
	if !issetTotalNotes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalNotes is not set"))
	}
	if !issetNotes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Notes is not set"))
	}
	return nil
}

func (p *NotesMetadataList) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *NotesMetadataList) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalNotes = v
	}
	return nil
}

func (p *NotesMetadataList) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NoteMetadata, 0, size)
	p.Notes = tSlice
	for i := 0; i < size; i++ {
		_elem17 := &NoteMetadata{}
		if err := _elem17.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
		}
		p.Notes = append(p.Notes, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NotesMetadataList) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.StoppedWords = tSlice
	for i := 0; i < size; i++ {
		var _elem18 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem18 = v
		}
		p.StoppedWords = append(p.StoppedWords, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NotesMetadataList) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.SearchedWords = tSlice
	for i := 0; i < size; i++ {
		var _elem19 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem19 = v
		}
		p.SearchedWords = append(p.SearchedWords, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NotesMetadataList) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.UpdateCount = &v
	}
	return nil
}

func (p *NotesMetadataList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotesMetadataList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NotesMetadataList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startIndex (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startIndex: ", p), err)
	}
	return err
}

func (p *NotesMetadataList) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalNotes", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalNotes: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalNotes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalNotes (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalNotes: ", p), err)
	}
	return err
}

func (p *NotesMetadataList) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notes", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Notes {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notes: ", p), err)
	}
	return err
}

func (p *NotesMetadataList) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoppedWords() {
		if err := oprot.WriteFieldBegin("stoppedWords", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stoppedWords: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.StoppedWords)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.StoppedWords {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stoppedWords: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataList) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSearchedWords() {
		if err := oprot.WriteFieldBegin("searchedWords", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:searchedWords: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SearchedWords)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SearchedWords {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:searchedWords: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataList) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateCount() {
		if err := oprot.WriteFieldBegin("updateCount", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:updateCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UpdateCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateCount (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:updateCount: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotesMetadataList(%+v)", *p)
}

// This structure is provided to the findNotesMetadata function to specify
// the subset of fields that should be included in each NoteMetadata element
// that is returned in the NotesMetadataList.
// Each field on this structure is a boolean flag that indicates whether the
// corresponding field should be included in the NoteMetadata structure when
// it is returned.  For example, if the 'includeTitle' field is set on this
// structure when calling findNotesMetadata, then each NoteMetadata in the
// list should have its 'title' field set.
// If one of the fields in this spec is not set, then it will be treated as
// 'false' by the server, so the default behavior is to include nothing in
// replies (but the mandatory GUID)
//
// Attributes:
//  - IncludeTitle
//  - IncludeContentLength
//  - IncludeCreated
//  - IncludeUpdated
//  - IncludeDeleted
//  - IncludeUpdateSequenceNum
//  - IncludeNotebookGuid
//  - IncludeTagGuids
//  - IncludeAttributes
//  - IncludeLargestResourceMime
//  - IncludeLargestResourceSize
type NotesMetadataResultSpec struct {
	// unused field # 1
	IncludeTitle *bool `thrift:"includeTitle,2" json:"includeTitle,omitempty"`
	// unused fields # 3 to 4
	IncludeContentLength *bool `thrift:"includeContentLength,5" json:"includeContentLength,omitempty"`
	IncludeCreated       *bool `thrift:"includeCreated,6" json:"includeCreated,omitempty"`
	IncludeUpdated       *bool `thrift:"includeUpdated,7" json:"includeUpdated,omitempty"`
	IncludeDeleted       *bool `thrift:"includeDeleted,8" json:"includeDeleted,omitempty"`
	// unused field # 9
	IncludeUpdateSequenceNum *bool `thrift:"includeUpdateSequenceNum,10" json:"includeUpdateSequenceNum,omitempty"`
	IncludeNotebookGuid      *bool `thrift:"includeNotebookGuid,11" json:"includeNotebookGuid,omitempty"`
	IncludeTagGuids          *bool `thrift:"includeTagGuids,12" json:"includeTagGuids,omitempty"`
	// unused field # 13
	IncludeAttributes *bool `thrift:"includeAttributes,14" json:"includeAttributes,omitempty"`
	// unused fields # 15 to 19
	IncludeLargestResourceMime *bool `thrift:"includeLargestResourceMime,20" json:"includeLargestResourceMime,omitempty"`
	IncludeLargestResourceSize *bool `thrift:"includeLargestResourceSize,21" json:"includeLargestResourceSize,omitempty"`
}

func NewNotesMetadataResultSpec() *NotesMetadataResultSpec {
	return &NotesMetadataResultSpec{}
}

var NotesMetadataResultSpec_IncludeTitle_DEFAULT bool

func (p *NotesMetadataResultSpec) GetIncludeTitle() bool {
	if !p.IsSetIncludeTitle() {
		return NotesMetadataResultSpec_IncludeTitle_DEFAULT
	}
	return *p.IncludeTitle
}

var NotesMetadataResultSpec_IncludeContentLength_DEFAULT bool

func (p *NotesMetadataResultSpec) GetIncludeContentLength() bool {
	if !p.IsSetIncludeContentLength() {
		return NotesMetadataResultSpec_IncludeContentLength_DEFAULT
	}
	return *p.IncludeContentLength
}

var NotesMetadataResultSpec_IncludeCreated_DEFAULT bool

func (p *NotesMetadataResultSpec) GetIncludeCreated() bool {
	if !p.IsSetIncludeCreated() {
		return NotesMetadataResultSpec_IncludeCreated_DEFAULT
	}
	return *p.IncludeCreated
}

var NotesMetadataResultSpec_IncludeUpdated_DEFAULT bool

func (p *NotesMetadataResultSpec) GetIncludeUpdated() bool {
	if !p.IsSetIncludeUpdated() {
		return NotesMetadataResultSpec_IncludeUpdated_DEFAULT
	}
	return *p.IncludeUpdated
}

var NotesMetadataResultSpec_IncludeDeleted_DEFAULT bool

func (p *NotesMetadataResultSpec) GetIncludeDeleted() bool {
	if !p.IsSetIncludeDeleted() {
		return NotesMetadataResultSpec_IncludeDeleted_DEFAULT
	}
	return *p.IncludeDeleted
}

var NotesMetadataResultSpec_IncludeUpdateSequenceNum_DEFAULT bool

func (p *NotesMetadataResultSpec) GetIncludeUpdateSequenceNum() bool {
	if !p.IsSetIncludeUpdateSequenceNum() {
		return NotesMetadataResultSpec_IncludeUpdateSequenceNum_DEFAULT
	}
	return *p.IncludeUpdateSequenceNum
}

var NotesMetadataResultSpec_IncludeNotebookGuid_DEFAULT bool

func (p *NotesMetadataResultSpec) GetIncludeNotebookGuid() bool {
	if !p.IsSetIncludeNotebookGuid() {
		return NotesMetadataResultSpec_IncludeNotebookGuid_DEFAULT
	}
	return *p.IncludeNotebookGuid
}

var NotesMetadataResultSpec_IncludeTagGuids_DEFAULT bool

func (p *NotesMetadataResultSpec) GetIncludeTagGuids() bool {
	if !p.IsSetIncludeTagGuids() {
		return NotesMetadataResultSpec_IncludeTagGuids_DEFAULT
	}
	return *p.IncludeTagGuids
}

var NotesMetadataResultSpec_IncludeAttributes_DEFAULT bool

func (p *NotesMetadataResultSpec) GetIncludeAttributes() bool {
	if !p.IsSetIncludeAttributes() {
		return NotesMetadataResultSpec_IncludeAttributes_DEFAULT
	}
	return *p.IncludeAttributes
}

var NotesMetadataResultSpec_IncludeLargestResourceMime_DEFAULT bool

func (p *NotesMetadataResultSpec) GetIncludeLargestResourceMime() bool {
	if !p.IsSetIncludeLargestResourceMime() {
		return NotesMetadataResultSpec_IncludeLargestResourceMime_DEFAULT
	}
	return *p.IncludeLargestResourceMime
}

var NotesMetadataResultSpec_IncludeLargestResourceSize_DEFAULT bool

func (p *NotesMetadataResultSpec) GetIncludeLargestResourceSize() bool {
	if !p.IsSetIncludeLargestResourceSize() {
		return NotesMetadataResultSpec_IncludeLargestResourceSize_DEFAULT
	}
	return *p.IncludeLargestResourceSize
}
func (p *NotesMetadataResultSpec) IsSetIncludeTitle() bool {
	return p.IncludeTitle != nil
}

func (p *NotesMetadataResultSpec) IsSetIncludeContentLength() bool {
	return p.IncludeContentLength != nil
}

func (p *NotesMetadataResultSpec) IsSetIncludeCreated() bool {
	return p.IncludeCreated != nil
}

func (p *NotesMetadataResultSpec) IsSetIncludeUpdated() bool {
	return p.IncludeUpdated != nil
}

func (p *NotesMetadataResultSpec) IsSetIncludeDeleted() bool {
	return p.IncludeDeleted != nil
}

func (p *NotesMetadataResultSpec) IsSetIncludeUpdateSequenceNum() bool {
	return p.IncludeUpdateSequenceNum != nil
}

func (p *NotesMetadataResultSpec) IsSetIncludeNotebookGuid() bool {
	return p.IncludeNotebookGuid != nil
}

func (p *NotesMetadataResultSpec) IsSetIncludeTagGuids() bool {
	return p.IncludeTagGuids != nil
}

func (p *NotesMetadataResultSpec) IsSetIncludeAttributes() bool {
	return p.IncludeAttributes != nil
}

func (p *NotesMetadataResultSpec) IsSetIncludeLargestResourceMime() bool {
	return p.IncludeLargestResourceMime != nil
}

func (p *NotesMetadataResultSpec) IsSetIncludeLargestResourceSize() bool {
	return p.IncludeLargestResourceSize != nil
}

func (p *NotesMetadataResultSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IncludeTitle = &v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IncludeContentLength = &v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.IncludeCreated = &v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.IncludeUpdated = &v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.IncludeDeleted = &v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.IncludeUpdateSequenceNum = &v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.IncludeNotebookGuid = &v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.IncludeTagGuids = &v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.IncludeAttributes = &v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.IncludeLargestResourceMime = &v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.IncludeLargestResourceSize = &v
	}
	return nil
}

func (p *NotesMetadataResultSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotesMetadataResultSpec"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NotesMetadataResultSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeTitle() {
		if err := oprot.WriteFieldBegin("includeTitle", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:includeTitle: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeTitle)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeTitle (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:includeTitle: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeContentLength() {
		if err := oprot.WriteFieldBegin("includeContentLength", thrift.BOOL, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:includeContentLength: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeContentLength)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeContentLength (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:includeContentLength: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeCreated() {
		if err := oprot.WriteFieldBegin("includeCreated", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:includeCreated: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeCreated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeCreated (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:includeCreated: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeUpdated() {
		if err := oprot.WriteFieldBegin("includeUpdated", thrift.BOOL, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:includeUpdated: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeUpdated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeUpdated (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:includeUpdated: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeDeleted() {
		if err := oprot.WriteFieldBegin("includeDeleted", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:includeDeleted: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeDeleted)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeDeleted (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:includeDeleted: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("includeUpdateSequenceNum", thrift.BOOL, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:includeUpdateSequenceNum: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeUpdateSequenceNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeUpdateSequenceNum (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:includeUpdateSequenceNum: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNotebookGuid() {
		if err := oprot.WriteFieldBegin("includeNotebookGuid", thrift.BOOL, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:includeNotebookGuid: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeNotebookGuid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeNotebookGuid (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:includeNotebookGuid: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeTagGuids() {
		if err := oprot.WriteFieldBegin("includeTagGuids", thrift.BOOL, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:includeTagGuids: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeTagGuids)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeTagGuids (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:includeTagGuids: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeAttributes() {
		if err := oprot.WriteFieldBegin("includeAttributes", thrift.BOOL, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:includeAttributes: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeAttributes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeAttributes (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:includeAttributes: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeLargestResourceMime() {
		if err := oprot.WriteFieldBegin("includeLargestResourceMime", thrift.BOOL, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:includeLargestResourceMime: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeLargestResourceMime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeLargestResourceMime (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:includeLargestResourceMime: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeLargestResourceSize() {
		if err := oprot.WriteFieldBegin("includeLargestResourceSize", thrift.BOOL, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:includeLargestResourceSize: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeLargestResourceSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeLargestResourceSize (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:includeLargestResourceSize: ", p), err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotesMetadataResultSpec(%+v)", *p)
}

//  A data structure representing the number of notes for each notebook
//  and tag with a non-zero set of applicable notes.
//
// <dl>
//  <dt>notebookCounts</dt>
//    <dd>
//    A mapping from the Notebook GUID to the number of
//    notes (from some selection) that are in the corresponding notebook.
//    </dd>
//
//  <dt>tagCounts</dt>
//    <dd>
//    A mapping from the Tag GUID to the number of notes (from some
//    selection) that have the corresponding tag.
//    </dd>
//
//  <dt>trashCount</dt>
//    <dd>
//    If this is set, then this is the number of notes that are in the trash.
//    If this is not set, then the number of notes in the trash hasn't been
//    reported.  (I.e. if there are no notes in the trash, this will be set
//    to 0.)
//    </dd>
//  </dl>
//
// Attributes:
//  - NotebookCounts
//  - TagCounts
//  - TrashCount
type NoteCollectionCounts struct {
	NotebookCounts map[types.GUID]int32 `thrift:"notebookCounts,1" json:"notebookCounts,omitempty"`
	TagCounts      map[types.GUID]int32 `thrift:"tagCounts,2" json:"tagCounts,omitempty"`
	TrashCount     *int32               `thrift:"trashCount,3" json:"trashCount,omitempty"`
}

func NewNoteCollectionCounts() *NoteCollectionCounts {
	return &NoteCollectionCounts{}
}

var NoteCollectionCounts_NotebookCounts_DEFAULT map[types.GUID]int32

func (p *NoteCollectionCounts) GetNotebookCounts() map[types.GUID]int32 {
	return p.NotebookCounts
}

var NoteCollectionCounts_TagCounts_DEFAULT map[types.GUID]int32

func (p *NoteCollectionCounts) GetTagCounts() map[types.GUID]int32 {
	return p.TagCounts
}

var NoteCollectionCounts_TrashCount_DEFAULT int32

func (p *NoteCollectionCounts) GetTrashCount() int32 {
	if !p.IsSetTrashCount() {
		return NoteCollectionCounts_TrashCount_DEFAULT
	}
	return *p.TrashCount
}
func (p *NoteCollectionCounts) IsSetNotebookCounts() bool {
	return p.NotebookCounts != nil
}

func (p *NoteCollectionCounts) IsSetTagCounts() bool {
	return p.TagCounts != nil
}

func (p *NoteCollectionCounts) IsSetTrashCount() bool {
	return p.TrashCount != nil
}

func (p *NoteCollectionCounts) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteCollectionCounts) readField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[types.GUID]int32, size)
	p.NotebookCounts = tMap
	for i := 0; i < size; i++ {
		var _key20 types.GUID
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := types.GUID(v)
			_key20 = temp
		}
		var _val21 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val21 = v
		}
		p.NotebookCounts[_key20] = _val21
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *NoteCollectionCounts) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[types.GUID]int32, size)
	p.TagCounts = tMap
	for i := 0; i < size; i++ {
		var _key22 types.GUID
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := types.GUID(v)
			_key22 = temp
		}
		var _val23 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val23 = v
		}
		p.TagCounts[_key22] = _val23
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *NoteCollectionCounts) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TrashCount = &v
	}
	return nil
}

func (p *NoteCollectionCounts) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteCollectionCounts"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteCollectionCounts) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookCounts() {
		if err := oprot.WriteFieldBegin("notebookCounts", thrift.MAP, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notebookCounts: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.NotebookCounts)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.NotebookCounts {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notebookCounts: ", p), err)
		}
	}
	return err
}

func (p *NoteCollectionCounts) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagCounts() {
		if err := oprot.WriteFieldBegin("tagCounts", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tagCounts: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.TagCounts)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.TagCounts {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tagCounts: ", p), err)
		}
	}
	return err
}

func (p *NoteCollectionCounts) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrashCount() {
		if err := oprot.WriteFieldBegin("trashCount", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:trashCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TrashCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.trashCount (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:trashCount: ", p), err)
		}
	}
	return err
}

func (p *NoteCollectionCounts) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteCollectionCounts(%+v)", *p)
}

// This structure is provided to the getNoteWithResultSpec function to specify the subset of
// fields that should be included in the Note that is returned. This allows clients to request
// the minimum set of information that they require when retrieving a note, reducing the size
// of the response and improving the response time.
//
// If one of the fields in this spec is not set, then it will be treated as 'false' by the service,
// so that the default behavior is to include none of the fields below in the Note.
//
// <dl>
//   <dt>includeContent</dt>
//   <dd>If true, the Note.content field will be populated with the note's ENML contents.</dd>
//
//   <dt>includeResourcesData</dt>
//   <dd>If true, any Resource elements will include the binary contents of their 'data' field's
//     body.</dd>
//
//   <dt>includeResourcesRecognition</dt>
//   <dd>If true, any Resource elements will include the binary contents of their 'recognition'
//     field's body if recognition data is available.</dd>
//
//   <dt>includeResourcesAlternateData</dt>
//   <dd>If true, any Resource elements will include the binary contents of their 'alternateData'
//     field's body, if an alternate form is available.</dd>
//
//   <dt>includeSharedNotes</dt>
//   <dd>If true, the Note.sharedNotes field will be populated with the note's shares.</dd>
//
//   <dt>includeNoteAppDataValues</dt>
//   <dd>If true, the Note.attributes.applicationData.fullMap field will be populated.</dd>
//
//   <dt>includeResourceAppDataValues</dt>
//   <dd>If true, the Note.resource.attributes.applicationData.fullMap field will be populated.</dd>
//
//   <dt>includeAccountLimits</dt>
//   <dd>If true, the Note.limits field will be populated with the note owner's account limits.</dd>
// </dl>
//
// Attributes:
//  - IncludeContent
//  - IncludeResourcesData
//  - IncludeResourcesRecognition
//  - IncludeResourcesAlternateData
//  - IncludeSharedNotes
//  - IncludeNoteAppDataValues
//  - IncludeResourceAppDataValues
//  - IncludeAccountLimits
type NoteResultSpec struct {
	IncludeContent                *bool `thrift:"includeContent,1" json:"includeContent,omitempty"`
	IncludeResourcesData          *bool `thrift:"includeResourcesData,2" json:"includeResourcesData,omitempty"`
	IncludeResourcesRecognition   *bool `thrift:"includeResourcesRecognition,3" json:"includeResourcesRecognition,omitempty"`
	IncludeResourcesAlternateData *bool `thrift:"includeResourcesAlternateData,4" json:"includeResourcesAlternateData,omitempty"`
	IncludeSharedNotes            *bool `thrift:"includeSharedNotes,5" json:"includeSharedNotes,omitempty"`
	IncludeNoteAppDataValues      *bool `thrift:"includeNoteAppDataValues,6" json:"includeNoteAppDataValues,omitempty"`
	IncludeResourceAppDataValues  *bool `thrift:"includeResourceAppDataValues,7" json:"includeResourceAppDataValues,omitempty"`
	IncludeAccountLimits          *bool `thrift:"includeAccountLimits,8" json:"includeAccountLimits,omitempty"`
}

func NewNoteResultSpec() *NoteResultSpec {
	return &NoteResultSpec{}
}

var NoteResultSpec_IncludeContent_DEFAULT bool

func (p *NoteResultSpec) GetIncludeContent() bool {
	if !p.IsSetIncludeContent() {
		return NoteResultSpec_IncludeContent_DEFAULT
	}
	return *p.IncludeContent
}

var NoteResultSpec_IncludeResourcesData_DEFAULT bool

func (p *NoteResultSpec) GetIncludeResourcesData() bool {
	if !p.IsSetIncludeResourcesData() {
		return NoteResultSpec_IncludeResourcesData_DEFAULT
	}
	return *p.IncludeResourcesData
}

var NoteResultSpec_IncludeResourcesRecognition_DEFAULT bool

func (p *NoteResultSpec) GetIncludeResourcesRecognition() bool {
	if !p.IsSetIncludeResourcesRecognition() {
		return NoteResultSpec_IncludeResourcesRecognition_DEFAULT
	}
	return *p.IncludeResourcesRecognition
}

var NoteResultSpec_IncludeResourcesAlternateData_DEFAULT bool

func (p *NoteResultSpec) GetIncludeResourcesAlternateData() bool {
	if !p.IsSetIncludeResourcesAlternateData() {
		return NoteResultSpec_IncludeResourcesAlternateData_DEFAULT
	}
	return *p.IncludeResourcesAlternateData
}

var NoteResultSpec_IncludeSharedNotes_DEFAULT bool

func (p *NoteResultSpec) GetIncludeSharedNotes() bool {
	if !p.IsSetIncludeSharedNotes() {
		return NoteResultSpec_IncludeSharedNotes_DEFAULT
	}
	return *p.IncludeSharedNotes
}

var NoteResultSpec_IncludeNoteAppDataValues_DEFAULT bool

func (p *NoteResultSpec) GetIncludeNoteAppDataValues() bool {
	if !p.IsSetIncludeNoteAppDataValues() {
		return NoteResultSpec_IncludeNoteAppDataValues_DEFAULT
	}
	return *p.IncludeNoteAppDataValues
}

var NoteResultSpec_IncludeResourceAppDataValues_DEFAULT bool

func (p *NoteResultSpec) GetIncludeResourceAppDataValues() bool {
	if !p.IsSetIncludeResourceAppDataValues() {
		return NoteResultSpec_IncludeResourceAppDataValues_DEFAULT
	}
	return *p.IncludeResourceAppDataValues
}

var NoteResultSpec_IncludeAccountLimits_DEFAULT bool

func (p *NoteResultSpec) GetIncludeAccountLimits() bool {
	if !p.IsSetIncludeAccountLimits() {
		return NoteResultSpec_IncludeAccountLimits_DEFAULT
	}
	return *p.IncludeAccountLimits
}
func (p *NoteResultSpec) IsSetIncludeContent() bool {
	return p.IncludeContent != nil
}

func (p *NoteResultSpec) IsSetIncludeResourcesData() bool {
	return p.IncludeResourcesData != nil
}

func (p *NoteResultSpec) IsSetIncludeResourcesRecognition() bool {
	return p.IncludeResourcesRecognition != nil
}

func (p *NoteResultSpec) IsSetIncludeResourcesAlternateData() bool {
	return p.IncludeResourcesAlternateData != nil
}

func (p *NoteResultSpec) IsSetIncludeSharedNotes() bool {
	return p.IncludeSharedNotes != nil
}

func (p *NoteResultSpec) IsSetIncludeNoteAppDataValues() bool {
	return p.IncludeNoteAppDataValues != nil
}

func (p *NoteResultSpec) IsSetIncludeResourceAppDataValues() bool {
	return p.IncludeResourceAppDataValues != nil
}

func (p *NoteResultSpec) IsSetIncludeAccountLimits() bool {
	return p.IncludeAccountLimits != nil
}

func (p *NoteResultSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteResultSpec) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IncludeContent = &v
	}
	return nil
}

func (p *NoteResultSpec) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IncludeResourcesData = &v
	}
	return nil
}

func (p *NoteResultSpec) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IncludeResourcesRecognition = &v
	}
	return nil
}

func (p *NoteResultSpec) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IncludeResourcesAlternateData = &v
	}
	return nil
}

func (p *NoteResultSpec) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IncludeSharedNotes = &v
	}
	return nil
}

func (p *NoteResultSpec) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.IncludeNoteAppDataValues = &v
	}
	return nil
}

func (p *NoteResultSpec) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.IncludeResourceAppDataValues = &v
	}
	return nil
}

func (p *NoteResultSpec) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.IncludeAccountLimits = &v
	}
	return nil
}

func (p *NoteResultSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteResultSpec"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteResultSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeContent() {
		if err := oprot.WriteFieldBegin("includeContent", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:includeContent: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeContent)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeContent (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:includeContent: ", p), err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResourcesData() {
		if err := oprot.WriteFieldBegin("includeResourcesData", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:includeResourcesData: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeResourcesData)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeResourcesData (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:includeResourcesData: ", p), err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResourcesRecognition() {
		if err := oprot.WriteFieldBegin("includeResourcesRecognition", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:includeResourcesRecognition: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeResourcesRecognition)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeResourcesRecognition (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:includeResourcesRecognition: ", p), err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResourcesAlternateData() {
		if err := oprot.WriteFieldBegin("includeResourcesAlternateData", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:includeResourcesAlternateData: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeResourcesAlternateData)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeResourcesAlternateData (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:includeResourcesAlternateData: ", p), err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeSharedNotes() {
		if err := oprot.WriteFieldBegin("includeSharedNotes", thrift.BOOL, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:includeSharedNotes: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeSharedNotes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeSharedNotes (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:includeSharedNotes: ", p), err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteAppDataValues() {
		if err := oprot.WriteFieldBegin("includeNoteAppDataValues", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:includeNoteAppDataValues: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeNoteAppDataValues)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeNoteAppDataValues (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:includeNoteAppDataValues: ", p), err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResourceAppDataValues() {
		if err := oprot.WriteFieldBegin("includeResourceAppDataValues", thrift.BOOL, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:includeResourceAppDataValues: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeResourceAppDataValues)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeResourceAppDataValues (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:includeResourceAppDataValues: ", p), err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeAccountLimits() {
		if err := oprot.WriteFieldBegin("includeAccountLimits", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:includeAccountLimits: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeAccountLimits)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeAccountLimits (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:includeAccountLimits: ", p), err)
		}
	}
	return err
}

func (p *NoteResultSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteResultSpec(%+v)", *p)
}

// Parameters that must be given to the NoteStore emailNote call. These allow
// the caller to specify the note to send, the recipient addresses, etc.
//
// <dl>
//  <dt>guid</dt>
//    <dd>
//      If set, this must be the GUID of a note within the user's account that
//      should be retrieved from the service and sent as email.  If not set,
//      the 'note' field must be provided instead.
//    </dd>
//
//  <dt>note</dt>
//    <dd>
//      If the 'guid' field is not set, this field must be provided, including
//      the full contents of the note note (and all of its Resources) to send.
//      This can be used for a Note that as not been created in the service,
//      for example by a local client with local notes.
//    </dd>
//
//  <dt>toAddresses</dt>
//    <dd>
//      If provided, this should contain a list of the SMTP email addresses
//      that should be included in the "To:" line of the email.
//      Callers must specify at least one "to" or "cc" email address.
//    </dd>
//
//  <dt>ccAddresses</dt>
//    <dd>
//      If provided, this should contain a list of the SMTP email addresses
//      that should be included in the "Cc:" line of the email.
//      Callers must specify at least one "to" or "cc" email address.
//    </dd>
//
//  <dt>subject</dt>
//    <dd>
//      If provided, this should contain the subject line of the email that
//      will be sent.  If not provided, the title of the note will be used
//      as the subject of the email.
//    </dd>
//
//  <dt>message</dt>
//    <dd>
//      If provided, this is additional personal text that should be included
//      into the email as a message from the owner to the recipient(s).
//    </dd>
// </dl>
//
// Attributes:
//  - GUID
//  - Note
//  - ToAddresses
//  - CcAddresses
//  - Subject
//  - Message
type NoteEmailParameters struct {
	GUID        *string     `thrift:"guid,1" json:"guid,omitempty"`
	Note        *types.Note `thrift:"note,2" json:"note,omitempty"`
	ToAddresses []string    `thrift:"toAddresses,3" json:"toAddresses,omitempty"`
	CcAddresses []string    `thrift:"ccAddresses,4" json:"ccAddresses,omitempty"`
	Subject     *string     `thrift:"subject,5" json:"subject,omitempty"`
	Message     *string     `thrift:"message,6" json:"message,omitempty"`
}

func NewNoteEmailParameters() *NoteEmailParameters {
	return &NoteEmailParameters{}
}

var NoteEmailParameters_GUID_DEFAULT string

func (p *NoteEmailParameters) GetGUID() string {
	if !p.IsSetGUID() {
		return NoteEmailParameters_GUID_DEFAULT
	}
	return *p.GUID
}

var NoteEmailParameters_Note_DEFAULT *types.Note

func (p *NoteEmailParameters) GetNote() *types.Note {
	if !p.IsSetNote() {
		return NoteEmailParameters_Note_DEFAULT
	}
	return p.Note
}

var NoteEmailParameters_ToAddresses_DEFAULT []string

func (p *NoteEmailParameters) GetToAddresses() []string {
	return p.ToAddresses
}

var NoteEmailParameters_CcAddresses_DEFAULT []string

func (p *NoteEmailParameters) GetCcAddresses() []string {
	return p.CcAddresses
}

var NoteEmailParameters_Subject_DEFAULT string

func (p *NoteEmailParameters) GetSubject() string {
	if !p.IsSetSubject() {
		return NoteEmailParameters_Subject_DEFAULT
	}
	return *p.Subject
}

var NoteEmailParameters_Message_DEFAULT string

func (p *NoteEmailParameters) GetMessage() string {
	if !p.IsSetMessage() {
		return NoteEmailParameters_Message_DEFAULT
	}
	return *p.Message
}
func (p *NoteEmailParameters) IsSetGUID() bool {
	return p.GUID != nil
}

func (p *NoteEmailParameters) IsSetNote() bool {
	return p.Note != nil
}

func (p *NoteEmailParameters) IsSetToAddresses() bool {
	return p.ToAddresses != nil
}

func (p *NoteEmailParameters) IsSetCcAddresses() bool {
	return p.CcAddresses != nil
}

func (p *NoteEmailParameters) IsSetSubject() bool {
	return p.Subject != nil
}

func (p *NoteEmailParameters) IsSetMessage() bool {
	return p.Message != nil
}

func (p *NoteEmailParameters) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteEmailParameters) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GUID = &v
	}
	return nil
}

func (p *NoteEmailParameters) readField2(iprot thrift.TProtocol) error {
	p.Note = &types.Note{}
	if err := p.Note.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Note), err)
	}
	return nil
}

func (p *NoteEmailParameters) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ToAddresses = tSlice
	for i := 0; i < size; i++ {
		var _elem24 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem24 = v
		}
		p.ToAddresses = append(p.ToAddresses, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteEmailParameters) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.CcAddresses = tSlice
	for i := 0; i < size; i++ {
		var _elem25 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem25 = v
		}
		p.CcAddresses = append(p.CcAddresses, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteEmailParameters) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Subject = &v
	}
	return nil
}

func (p *NoteEmailParameters) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *NoteEmailParameters) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteEmailParameters"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteEmailParameters) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGUID() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err)
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNote() {
		if err := oprot.WriteFieldBegin("note", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:note: ", p), err)
		}
		if err := p.Note.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Note), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:note: ", p), err)
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetToAddresses() {
		if err := oprot.WriteFieldBegin("toAddresses", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toAddresses: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ToAddresses)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ToAddresses {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toAddresses: ", p), err)
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCcAddresses() {
		if err := oprot.WriteFieldBegin("ccAddresses", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ccAddresses: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.CcAddresses)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.CcAddresses {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ccAddresses: ", p), err)
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubject() {
		if err := oprot.WriteFieldBegin("subject", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:subject: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Subject)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subject (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:subject: ", p), err)
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:message: ", p), err)
		}
	}
	return err
}

func (p *NoteEmailParameters) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteEmailParameters(%+v)", *p)
}

// Identifying information about previous versions of a note that are backed up
// within Evernote's servers.  Used in the return value of the listNoteVersions
// call.
//
// <dl>
//  <dt>updateSequenceNum</dt>
//  <dd>
//    The update sequence number for the Note when it last had this content.
//    This serves to uniquely identify each version of the note, since USN
//    values are unique within an account for each update.
//  </dd>
//  <dt>updated</dt>
//  <dd>
//    The 'updated' time that was set on the Note when it had this version
//    of the content.  This is the user-modifiable modification time on the
//    note, so it's not reliable for guaranteeing the order of various
//    versions.  (E.g. if someone modifies the note, then changes this time
//    manually into the past and then updates the note again.)
//  </dd>
//  <dt>saved</dt>
//  <dd>
//    A timestamp that holds the date and time when this version of the note
//    was backed up by Evernote's servers.
//  </dd>
//  <dt>title</dt>
//  <dd>
//    The title of the note when this particular version was saved.  (The
//    current title of the note may differ from this value.)
//  </dd>
//  <dt>lastEditorId</dt>
//  <dd>
//    The ID of the user who made the change to this version of the note. This will be
//    unset if the note version was edited by the owner of the account.
//  </dd>
// </dl>
//
// Attributes:
//  - UpdateSequenceNum
//  - Updated
//  - Saved
//  - Title
//  - LastEditorId
type NoteVersionId struct {
	UpdateSequenceNum int32           `thrift:"updateSequenceNum,1,required" json:"updateSequenceNum"`
	Updated           types.Timestamp `thrift:"updated,2,required" json:"updated"`
	Saved             types.Timestamp `thrift:"saved,3,required" json:"saved"`
	Title             string          `thrift:"title,4,required" json:"title"`
	LastEditorId      *types.UserID   `thrift:"lastEditorId,5" json:"lastEditorId,omitempty"`
}

func NewNoteVersionId() *NoteVersionId {
	return &NoteVersionId{}
}

func (p *NoteVersionId) GetUpdateSequenceNum() int32 {
	return p.UpdateSequenceNum
}

func (p *NoteVersionId) GetUpdated() types.Timestamp {
	return p.Updated
}

func (p *NoteVersionId) GetSaved() types.Timestamp {
	return p.Saved
}

func (p *NoteVersionId) GetTitle() string {
	return p.Title
}

var NoteVersionId_LastEditorId_DEFAULT types.UserID

func (p *NoteVersionId) GetLastEditorId() types.UserID {
	if !p.IsSetLastEditorId() {
		return NoteVersionId_LastEditorId_DEFAULT
	}
	return *p.LastEditorId
}
func (p *NoteVersionId) IsSetLastEditorId() bool {
	return p.LastEditorId != nil
}

func (p *NoteVersionId) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUpdateSequenceNum bool = false
	var issetUpdated bool = false
	var issetSaved bool = false
	var issetTitle bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetUpdateSequenceNum = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetUpdated = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetSaved = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetTitle = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUpdateSequenceNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdateSequenceNum is not set"))
	}
	if !issetUpdated {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Updated is not set"))
	}
	if !issetSaved {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Saved is not set"))
	}
	if !issetTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"))
	}
	return nil
}

func (p *NoteVersionId) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *NoteVersionId) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.Timestamp(v)
		p.Updated = temp
	}
	return nil
}

func (p *NoteVersionId) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := types.Timestamp(v)
		p.Saved = temp
	}
	return nil
}

func (p *NoteVersionId) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *NoteVersionId) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := types.UserID(v)
		p.LastEditorId = &temp
	}
	return nil
}

func (p *NoteVersionId) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteVersionId"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteVersionId) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateSequenceNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateSequenceNum: ", p), err)
	}
	return err
}

func (p *NoteVersionId) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updated", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updated: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Updated)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updated (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updated: ", p), err)
	}
	return err
}

func (p *NoteVersionId) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("saved", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:saved: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Saved)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.saved (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:saved: ", p), err)
	}
	return err
}

func (p *NoteVersionId) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:title: ", p), err)
	}
	return err
}

func (p *NoteVersionId) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastEditorId() {
		if err := oprot.WriteFieldBegin("lastEditorId", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastEditorId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.LastEditorId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastEditorId (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastEditorId: ", p), err)
		}
	}
	return err
}

func (p *NoteVersionId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteVersionId(%+v)", *p)
}

// A description of the thing for which we are searching for related
// entities.
//
// You must specify either <em>noteGuid</em> or <em>plainText</em>, but
// not both. <em>filter</em> and <em>referenceUri</em> are optional.
//
// <dl>
// <dt>noteGuid</dt>
// <dd>The GUID of an existing note in your account for which related
//     entities will be found.</dd>
//
// <dt>plainText</dt>
// <dd>A string of plain text for which to find related entities.
//     You should provide a text block with a number of characters between
//     EDAM_RELATED_PLAINTEXT_LEN_MIN and EDAM_RELATED_PLAINTEXT_LEN_MAX.
//     </dd>
//
// <dt>filter</dt>
// <dd>The list of criteria that will constrain the notes being considered
//     related.
//     Please note that some of the parameters may be ignored, such as
//     <em>order</em> and <em>ascending</em>.
// </dd>
//
// <dt>referenceUri</dt>
// <dd>A URI string specifying a reference entity, around which "relatedness"
//     should be based. This can be an URL pointing to a web page, for example.
// </dd>
//
// <dt>context</dt>
// <dd>Specifies the context to consider when determining related results.
//     Clients must leave this value unset unless they wish to explicitly specify a known
//     non-default context.
// </dd>
//
// <dt>cacheKey</dt>
// <dd>If set and non-empty, this is an indicator for the server whether it is actually
//     necessary to perform a new findRelated call at all. Cache Keys are opaque strings
//     which are returned by the server as part of "RelatedResult" in response
//     to a "NoteStore.findRelated" query. Cache Keys are inherently query specific.
//
//     If set to an empty string, this indicates that the server should generate a cache
//     key in the response as part of "RelatedResult".
//
//     If not set, the server will not attempt to generate a cache key at all.
// </dd>
// </dl>
//
// Attributes:
//  - NoteGuid
//  - PlainText
//  - Filter
//  - ReferenceUri
//  - Context
//  - CacheKey
type RelatedQuery struct {
	NoteGuid     *string     `thrift:"noteGuid,1" json:"noteGuid,omitempty"`
	PlainText    *string     `thrift:"plainText,2" json:"plainText,omitempty"`
	Filter       *NoteFilter `thrift:"filter,3" json:"filter,omitempty"`
	ReferenceUri *string     `thrift:"referenceUri,4" json:"referenceUri,omitempty"`
	Context      *string     `thrift:"context,5" json:"context,omitempty"`
	CacheKey     *string     `thrift:"cacheKey,6" json:"cacheKey,omitempty"`
}

func NewRelatedQuery() *RelatedQuery {
	return &RelatedQuery{}
}

var RelatedQuery_NoteGuid_DEFAULT string

func (p *RelatedQuery) GetNoteGuid() string {
	if !p.IsSetNoteGuid() {
		return RelatedQuery_NoteGuid_DEFAULT
	}
	return *p.NoteGuid
}

var RelatedQuery_PlainText_DEFAULT string

func (p *RelatedQuery) GetPlainText() string {
	if !p.IsSetPlainText() {
		return RelatedQuery_PlainText_DEFAULT
	}
	return *p.PlainText
}

var RelatedQuery_Filter_DEFAULT *NoteFilter

func (p *RelatedQuery) GetFilter() *NoteFilter {
	if !p.IsSetFilter() {
		return RelatedQuery_Filter_DEFAULT
	}
	return p.Filter
}

var RelatedQuery_ReferenceUri_DEFAULT string

func (p *RelatedQuery) GetReferenceUri() string {
	if !p.IsSetReferenceUri() {
		return RelatedQuery_ReferenceUri_DEFAULT
	}
	return *p.ReferenceUri
}

var RelatedQuery_Context_DEFAULT string

func (p *RelatedQuery) GetContext() string {
	if !p.IsSetContext() {
		return RelatedQuery_Context_DEFAULT
	}
	return *p.Context
}

var RelatedQuery_CacheKey_DEFAULT string

func (p *RelatedQuery) GetCacheKey() string {
	if !p.IsSetCacheKey() {
		return RelatedQuery_CacheKey_DEFAULT
	}
	return *p.CacheKey
}
func (p *RelatedQuery) IsSetNoteGuid() bool {
	return p.NoteGuid != nil
}

func (p *RelatedQuery) IsSetPlainText() bool {
	return p.PlainText != nil
}

func (p *RelatedQuery) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *RelatedQuery) IsSetReferenceUri() bool {
	return p.ReferenceUri != nil
}

func (p *RelatedQuery) IsSetContext() bool {
	return p.Context != nil
}

func (p *RelatedQuery) IsSetCacheKey() bool {
	return p.CacheKey != nil
}

func (p *RelatedQuery) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RelatedQuery) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NoteGuid = &v
	}
	return nil
}

func (p *RelatedQuery) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PlainText = &v
	}
	return nil
}

func (p *RelatedQuery) readField3(iprot thrift.TProtocol) error {
	p.Filter = &NoteFilter{}
	if err := p.Filter.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Filter), err)
	}
	return nil
}

func (p *RelatedQuery) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ReferenceUri = &v
	}
	return nil
}

func (p *RelatedQuery) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Context = &v
	}
	return nil
}

func (p *RelatedQuery) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CacheKey = &v
	}
	return nil
}

func (p *RelatedQuery) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RelatedQuery"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RelatedQuery) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteGuid() {
		if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:noteGuid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NoteGuid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noteGuid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:noteGuid: ", p), err)
		}
	}
	return err
}

func (p *RelatedQuery) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlainText() {
		if err := oprot.WriteFieldBegin("plainText", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:plainText: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PlainText)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.plainText (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:plainText: ", p), err)
		}
	}
	return err
}

func (p *RelatedQuery) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilter() {
		if err := oprot.WriteFieldBegin("filter", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:filter: ", p), err)
		}
		if err := p.Filter.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Filter), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:filter: ", p), err)
		}
	}
	return err
}

func (p *RelatedQuery) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReferenceUri() {
		if err := oprot.WriteFieldBegin("referenceUri", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:referenceUri: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ReferenceUri)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.referenceUri (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:referenceUri: ", p), err)
		}
	}
	return err
}

func (p *RelatedQuery) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContext() {
		if err := oprot.WriteFieldBegin("context", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:context: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Context)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.context (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:context: ", p), err)
		}
	}
	return err
}

func (p *RelatedQuery) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheKey() {
		if err := oprot.WriteFieldBegin("cacheKey", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cacheKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CacheKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cacheKey (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cacheKey: ", p), err)
		}
	}
	return err
}

func (p *RelatedQuery) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelatedQuery(%+v)", *p)
}

// The result of calling findRelated().  The contents of the notes,
// notebooks, and tags fields will be in decreasing order of expected
// relevance.  It is possible that fewer results than requested will be
// returned even if there are enough distinct entities in the account
// in cases where the relevance is estimated to be low.
//
// <dl>
// <dt>notes</dt>
// <dd>If notes have been requested to be included, this will be the
//     list of notes.</dd>
//
// <dt>notebooks</dt>
// <dd>If notebooks have been requested to be included, this will be the
//     list of notebooks.</dd>
//
// <dt>tags</dt>
// <dd>If tags have been requested to be included, this will be the list
//     of tags.</dd>
//
// <dt>containingNotebooks</dt>
// <dd>If <code>includeContainingNotebooks</code> is set to <code>true</code>
//     in the RelatedResultSpec, return the list of notebooks to
//     to which the returned related notes belong. The notebooks in this
//     list will occur once per notebook GUID and are represented as
//     NotebookDescriptor objects.</dd>
//
// <dt>experts</dt>
// <dd>If experts have been requested to be included, this will return
//  a list of users within your business who have knowledge about the specified query.
// </dd>
//
// <dt>relatedContent</dt>
// <dd>If related content has been requested to be included, this will be the list of
//  related content snippets.
// </dd>
//
// <dt>cacheKey</dt>
// <dd>If set and non-empty, this cache key may be used in subsequent
//     "NoteStore.findRelated" calls (via "RelatedQuery") to re-use previous
//     responses that were cached on the client-side, instead of actually performing
//     another search.
//
//     If set to an empty string, this indicates that the server could not determine
//     a specific key for this response, but the client should nevertheless remove
//     any previously cached result for this request.
//
//     If unset/null, it is up to the client whether to re-use cached results or to
//     use the server's response.
//
//     If set to the exact non-empty cache key that was specified in
//     "RelatedQuery.cacheKey", this indicates that the server decided that cached results
//     could be reused.
//
//     Depending on the cache key specified in the query, the "RelatedResult" may only be
//     partially filled. For each set field, the client should replace the corresponding
//     part in the previously cached result with the new partial result.
//
//     For example, for a specific query that has both "RelatedResultSpec.maxNotes" and
//     "RelatedResultSpec.maxRelatedContent" set to positive values, the server may decide
//     that the previously requested and cached <em>Related Content</em> are unchanged,
//     but new results for <em>Related Notes</em> are available. The
//     response will have a new cache key and have "RelatedResult.notes" set, but have
//     "RelatedResult.relatedContent" unset (not just empty, but really unset).
//
//     In this situation, the client should replace any cached notes with the newly
//     returned "RelatedResult.notes", but it can re-use the previously cached entries for
//     "RelatedResult.relatedContent". List fields that are set, but empty indicate that
//     no results could be found; the cache should be updated correspondingly.
// </dd>
//
// <dt>cacheExpires</dt>
// <dd> If set, clients should reuse this response for any situations where the same input
//      parameters are applicable for up to this many seconds after receiving this result.
//
//      After this time has passed, the client may request a new result from the service,
//      but it should supply the stored cacheKey to the service when checking for an
//      update.
// </dd>
//
// </dl>
//
// Attributes:
//  - Notes
//  - Notebooks
//  - Tags
//  - ContainingNotebooks
//  - Experts
//  - RelatedContent
//  - CacheKey
//  - CacheExpires
type RelatedResult_ struct {
	Notes               []*types.Note               `thrift:"notes,1" json:"notes,omitempty"`
	Notebooks           []*types.Notebook           `thrift:"notebooks,2" json:"notebooks,omitempty"`
	Tags                []*types.Tag                `thrift:"tags,3" json:"tags,omitempty"`
	ContainingNotebooks []*types.NotebookDescriptor `thrift:"containingNotebooks,4" json:"containingNotebooks,omitempty"`
	// unused field # 5
	Experts        []*types.UserProfile    `thrift:"experts,6" json:"experts,omitempty"`
	RelatedContent []*types.RelatedContent `thrift:"relatedContent,7" json:"relatedContent,omitempty"`
	CacheKey       *string                 `thrift:"cacheKey,8" json:"cacheKey,omitempty"`
	CacheExpires   *int32                  `thrift:"cacheExpires,9" json:"cacheExpires,omitempty"`
}

func NewRelatedResult_() *RelatedResult_ {
	return &RelatedResult_{}
}

var RelatedResult__Notes_DEFAULT []*types.Note

func (p *RelatedResult_) GetNotes() []*types.Note {
	return p.Notes
}

var RelatedResult__Notebooks_DEFAULT []*types.Notebook

func (p *RelatedResult_) GetNotebooks() []*types.Notebook {
	return p.Notebooks
}

var RelatedResult__Tags_DEFAULT []*types.Tag

func (p *RelatedResult_) GetTags() []*types.Tag {
	return p.Tags
}

var RelatedResult__ContainingNotebooks_DEFAULT []*types.NotebookDescriptor

func (p *RelatedResult_) GetContainingNotebooks() []*types.NotebookDescriptor {
	return p.ContainingNotebooks
}

var RelatedResult__Experts_DEFAULT []*types.UserProfile

func (p *RelatedResult_) GetExperts() []*types.UserProfile {
	return p.Experts
}

var RelatedResult__RelatedContent_DEFAULT []*types.RelatedContent

func (p *RelatedResult_) GetRelatedContent() []*types.RelatedContent {
	return p.RelatedContent
}

var RelatedResult__CacheKey_DEFAULT string

func (p *RelatedResult_) GetCacheKey() string {
	if !p.IsSetCacheKey() {
		return RelatedResult__CacheKey_DEFAULT
	}
	return *p.CacheKey
}

var RelatedResult__CacheExpires_DEFAULT int32

func (p *RelatedResult_) GetCacheExpires() int32 {
	if !p.IsSetCacheExpires() {
		return RelatedResult__CacheExpires_DEFAULT
	}
	return *p.CacheExpires
}
func (p *RelatedResult_) IsSetNotes() bool {
	return p.Notes != nil
}

func (p *RelatedResult_) IsSetNotebooks() bool {
	return p.Notebooks != nil
}

func (p *RelatedResult_) IsSetTags() bool {
	return p.Tags != nil
}

func (p *RelatedResult_) IsSetContainingNotebooks() bool {
	return p.ContainingNotebooks != nil
}

func (p *RelatedResult_) IsSetExperts() bool {
	return p.Experts != nil
}

func (p *RelatedResult_) IsSetRelatedContent() bool {
	return p.RelatedContent != nil
}

func (p *RelatedResult_) IsSetCacheKey() bool {
	return p.CacheKey != nil
}

func (p *RelatedResult_) IsSetCacheExpires() bool {
	return p.CacheExpires != nil
}

func (p *RelatedResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RelatedResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.Note, 0, size)
	p.Notes = tSlice
	for i := 0; i < size; i++ {
		_elem26 := &types.Note{}
		if err := _elem26.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
		}
		p.Notes = append(p.Notes, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RelatedResult_) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.Notebook, 0, size)
	p.Notebooks = tSlice
	for i := 0; i < size; i++ {
		_elem27 := &types.Notebook{}
		if err := _elem27.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
		}
		p.Notebooks = append(p.Notebooks, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RelatedResult_) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.Tag, 0, size)
	p.Tags = tSlice
	for i := 0; i < size; i++ {
		_elem28 := &types.Tag{}
		if err := _elem28.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
		}
		p.Tags = append(p.Tags, _elem28)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RelatedResult_) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.NotebookDescriptor, 0, size)
	p.ContainingNotebooks = tSlice
	for i := 0; i < size; i++ {
		_elem29 := &types.NotebookDescriptor{}
		if err := _elem29.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
		}
		p.ContainingNotebooks = append(p.ContainingNotebooks, _elem29)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RelatedResult_) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.UserProfile, 0, size)
	p.Experts = tSlice
	for i := 0; i < size; i++ {
		_elem30 := &types.UserProfile{}
		if err := _elem30.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
		}
		p.Experts = append(p.Experts, _elem30)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RelatedResult_) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.RelatedContent, 0, size)
	p.RelatedContent = tSlice
	for i := 0; i < size; i++ {
		_elem31 := &types.RelatedContent{}
		if err := _elem31.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem31), err)
		}
		p.RelatedContent = append(p.RelatedContent, _elem31)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RelatedResult_) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.CacheKey = &v
	}
	return nil
}

func (p *RelatedResult_) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.CacheExpires = &v
	}
	return nil
}

func (p *RelatedResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RelatedResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RelatedResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotes() {
		if err := oprot.WriteFieldBegin("notes", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notes: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notes)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Notes {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notes: ", p), err)
		}
	}
	return err
}

func (p *RelatedResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebooks() {
		if err := oprot.WriteFieldBegin("notebooks", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notebooks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notebooks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Notebooks {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notebooks: ", p), err)
		}
	}
	return err
}

func (p *RelatedResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err := oprot.WriteFieldBegin("tags", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tags: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Tags {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tags: ", p), err)
		}
	}
	return err
}

func (p *RelatedResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContainingNotebooks() {
		if err := oprot.WriteFieldBegin("containingNotebooks", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:containingNotebooks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ContainingNotebooks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ContainingNotebooks {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:containingNotebooks: ", p), err)
		}
	}
	return err
}

func (p *RelatedResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperts() {
		if err := oprot.WriteFieldBegin("experts", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:experts: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Experts)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Experts {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:experts: ", p), err)
		}
	}
	return err
}

func (p *RelatedResult_) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelatedContent() {
		if err := oprot.WriteFieldBegin("relatedContent", thrift.LIST, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:relatedContent: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RelatedContent)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.RelatedContent {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:relatedContent: ", p), err)
		}
	}
	return err
}

func (p *RelatedResult_) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheKey() {
		if err := oprot.WriteFieldBegin("cacheKey", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:cacheKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CacheKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cacheKey (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:cacheKey: ", p), err)
		}
	}
	return err
}

func (p *RelatedResult_) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheExpires() {
		if err := oprot.WriteFieldBegin("cacheExpires", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:cacheExpires: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.CacheExpires)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cacheExpires (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:cacheExpires: ", p), err)
		}
	}
	return err
}

func (p *RelatedResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelatedResult_(%+v)", *p)
}

// A description of the thing for which the service will find related
// entities, via findRelated(), together with a description of what
// type of entities and how many you are seeking in the
// RelatedResult.
//
// <dl>
// <dt>maxNotes</dt>
// <dd>Return notes that are related to the query, but no more than
//     this many.  Any value greater than EDAM_RELATED_MAX_NOTES
//     will be silently capped.  If you do not set this field, then
//     no notes will be returned.</dd>
//
// <dt>maxNotebooks</dt>
// <dd>Return notebooks that are related to the query, but no more than
//     this many.  Any value greater than EDAM_RELATED_MAX_NOTEBOOKS
//     will be silently capped.  If you do not set this field, then
//     no notebooks will be returned.</dd>
//
// <dt>maxTags</dt>
// <dd>Return tags that are related to the query, but no more than
//     this many.  Any value greater than EDAM_RELATED_MAX_TAGS
//     will be silently capped.  If you do not set this field, then
//     no tags will be returned.</dd>
// </dl>
//
// <dt>writableNotebooksOnly</dt>
// <dd>Require that all returned related notebooks are writable.
//     The user will be able to create notes in all returned notebooks.
//     However, individual notes returned may still belong to notebooks
//     in which the user lacks the ability to create notes.</dd>
// </dl>
//
// <dt>includeContainingNotebooks</dt>
// <dd>If set to <code>true</code>, return the containingNotebooks field
//     in the RelatedResult, which will contain the list of notebooks to
//     to which the returned related notes belong.</dd>
// </dl>
//
// <dt>maxExperts</dt>
// <dd>This can only be used when making a findRelated call against a business.
//  Find users within your business who have knowledge about the specified query.
//  No more than this many users will be returned. Any value greater than
//  EDAM_RELATED_MAX_EXPERTS will be silently capped.
// </dd>
//
// <dt>maxRelatedContent</dt>
// <dd>Return snippets of related content that is related to the query, but no more than
//  this many. Any value greater than EDAM_RELATED_MAX_RELATED_CONTENT will be silently
//  capped. If you do not set this field, then no related content will be returned.</dd>
// </dl>
//
// <dt>relatedContentTypes</dt>
// <dd>Specifies the types of Related Content that should be returned.</dd>
// </dl>
//
// Attributes:
//  - MaxNotes
//  - MaxNotebooks
//  - MaxTags
//  - WritableNotebooksOnly
//  - IncludeContainingNotebooks
//  - MaxExperts
//  - MaxRelatedContent
//  - RelatedContentTypes
type RelatedResultSpec struct {
	MaxNotes                   *int32 `thrift:"maxNotes,1" json:"maxNotes,omitempty"`
	MaxNotebooks               *int32 `thrift:"maxNotebooks,2" json:"maxNotebooks,omitempty"`
	MaxTags                    *int32 `thrift:"maxTags,3" json:"maxTags,omitempty"`
	WritableNotebooksOnly      *bool  `thrift:"writableNotebooksOnly,4" json:"writableNotebooksOnly,omitempty"`
	IncludeContainingNotebooks *bool  `thrift:"includeContainingNotebooks,5" json:"includeContainingNotebooks,omitempty"`
	// unused field # 6
	MaxExperts          *int32                            `thrift:"maxExperts,7" json:"maxExperts,omitempty"`
	MaxRelatedContent   *int32                            `thrift:"maxRelatedContent,8" json:"maxRelatedContent,omitempty"`
	RelatedContentTypes map[types.RelatedContentType]bool `thrift:"relatedContentTypes,9" json:"relatedContentTypes,omitempty"`
}

func NewRelatedResultSpec() *RelatedResultSpec {
	return &RelatedResultSpec{}
}

var RelatedResultSpec_MaxNotes_DEFAULT int32

func (p *RelatedResultSpec) GetMaxNotes() int32 {
	if !p.IsSetMaxNotes() {
		return RelatedResultSpec_MaxNotes_DEFAULT
	}
	return *p.MaxNotes
}

var RelatedResultSpec_MaxNotebooks_DEFAULT int32

func (p *RelatedResultSpec) GetMaxNotebooks() int32 {
	if !p.IsSetMaxNotebooks() {
		return RelatedResultSpec_MaxNotebooks_DEFAULT
	}
	return *p.MaxNotebooks
}

var RelatedResultSpec_MaxTags_DEFAULT int32

func (p *RelatedResultSpec) GetMaxTags() int32 {
	if !p.IsSetMaxTags() {
		return RelatedResultSpec_MaxTags_DEFAULT
	}
	return *p.MaxTags
}

var RelatedResultSpec_WritableNotebooksOnly_DEFAULT bool

func (p *RelatedResultSpec) GetWritableNotebooksOnly() bool {
	if !p.IsSetWritableNotebooksOnly() {
		return RelatedResultSpec_WritableNotebooksOnly_DEFAULT
	}
	return *p.WritableNotebooksOnly
}

var RelatedResultSpec_IncludeContainingNotebooks_DEFAULT bool

func (p *RelatedResultSpec) GetIncludeContainingNotebooks() bool {
	if !p.IsSetIncludeContainingNotebooks() {
		return RelatedResultSpec_IncludeContainingNotebooks_DEFAULT
	}
	return *p.IncludeContainingNotebooks
}

var RelatedResultSpec_MaxExperts_DEFAULT int32

func (p *RelatedResultSpec) GetMaxExperts() int32 {
	if !p.IsSetMaxExperts() {
		return RelatedResultSpec_MaxExperts_DEFAULT
	}
	return *p.MaxExperts
}

var RelatedResultSpec_MaxRelatedContent_DEFAULT int32

func (p *RelatedResultSpec) GetMaxRelatedContent() int32 {
	if !p.IsSetMaxRelatedContent() {
		return RelatedResultSpec_MaxRelatedContent_DEFAULT
	}
	return *p.MaxRelatedContent
}

var RelatedResultSpec_RelatedContentTypes_DEFAULT map[types.RelatedContentType]bool

func (p *RelatedResultSpec) GetRelatedContentTypes() map[types.RelatedContentType]bool {
	return p.RelatedContentTypes
}
func (p *RelatedResultSpec) IsSetMaxNotes() bool {
	return p.MaxNotes != nil
}

func (p *RelatedResultSpec) IsSetMaxNotebooks() bool {
	return p.MaxNotebooks != nil
}

func (p *RelatedResultSpec) IsSetMaxTags() bool {
	return p.MaxTags != nil
}

func (p *RelatedResultSpec) IsSetWritableNotebooksOnly() bool {
	return p.WritableNotebooksOnly != nil
}

func (p *RelatedResultSpec) IsSetIncludeContainingNotebooks() bool {
	return p.IncludeContainingNotebooks != nil
}

func (p *RelatedResultSpec) IsSetMaxExperts() bool {
	return p.MaxExperts != nil
}

func (p *RelatedResultSpec) IsSetMaxRelatedContent() bool {
	return p.MaxRelatedContent != nil
}

func (p *RelatedResultSpec) IsSetRelatedContentTypes() bool {
	return p.RelatedContentTypes != nil
}

func (p *RelatedResultSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RelatedResultSpec) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaxNotes = &v
	}
	return nil
}

func (p *RelatedResultSpec) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MaxNotebooks = &v
	}
	return nil
}

func (p *RelatedResultSpec) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxTags = &v
	}
	return nil
}

func (p *RelatedResultSpec) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.WritableNotebooksOnly = &v
	}
	return nil
}

func (p *RelatedResultSpec) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IncludeContainingNotebooks = &v
	}
	return nil
}

func (p *RelatedResultSpec) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.MaxExperts = &v
	}
	return nil
}

func (p *RelatedResultSpec) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.MaxRelatedContent = &v
	}
	return nil
}

func (p *RelatedResultSpec) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[types.RelatedContentType]bool, size)
	p.RelatedContentTypes = tSet
	for i := 0; i < size; i++ {
		var _elem32 types.RelatedContentType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := types.RelatedContentType(v)
			_elem32 = temp
		}
		p.RelatedContentTypes[_elem32] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *RelatedResultSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RelatedResultSpec"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RelatedResultSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxNotes() {
		if err := oprot.WriteFieldBegin("maxNotes", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maxNotes: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MaxNotes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxNotes (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maxNotes: ", p), err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxNotebooks() {
		if err := oprot.WriteFieldBegin("maxNotebooks", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maxNotebooks: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MaxNotebooks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxNotebooks (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maxNotebooks: ", p), err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxTags() {
		if err := oprot.WriteFieldBegin("maxTags", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxTags: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MaxTags)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxTags (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxTags: ", p), err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetWritableNotebooksOnly() {
		if err := oprot.WriteFieldBegin("writableNotebooksOnly", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:writableNotebooksOnly: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.WritableNotebooksOnly)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.writableNotebooksOnly (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:writableNotebooksOnly: ", p), err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeContainingNotebooks() {
		if err := oprot.WriteFieldBegin("includeContainingNotebooks", thrift.BOOL, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:includeContainingNotebooks: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeContainingNotebooks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeContainingNotebooks (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:includeContainingNotebooks: ", p), err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxExperts() {
		if err := oprot.WriteFieldBegin("maxExperts", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:maxExperts: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MaxExperts)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxExperts (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:maxExperts: ", p), err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxRelatedContent() {
		if err := oprot.WriteFieldBegin("maxRelatedContent", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:maxRelatedContent: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MaxRelatedContent)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxRelatedContent (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:maxRelatedContent: ", p), err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelatedContentTypes() {
		if err := oprot.WriteFieldBegin("relatedContentTypes", thrift.SET, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:relatedContentTypes: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.I32, len(p.RelatedContentTypes)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.RelatedContentTypes {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:relatedContentTypes: ", p), err)
		}
	}
	return err
}

func (p *RelatedResultSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelatedResultSpec(%+v)", *p)
}

// The result of a call to updateNoteIfUsnMatches, which optionally updates a note
// based on the current value of the note's update sequence number on the service.
//
// <dl>
// <dt>note</dt>
// <dd>Either the current state of the note if <tt>updated</tt> is false or the
// result of updating the note as would be done via the <tt>updateNote</tt> method.
// If the note was not updated, you will receive a Note that does not include note
// content, resources data, resources recognition data, or resources alternate data.
// You can check for updates to these large objects by checking the Data.bodyHash
// values and downloading accordingly.</dd>
//
// <dt>updated</dt>
// <dd>Whether or not the note was updated by the operation.</dd>
// </dl>
//
// Attributes:
//  - Note
//  - Updated
type UpdateNoteIfUsnMatchesResult_ struct {
	Note    *types.Note `thrift:"note,1" json:"note,omitempty"`
	Updated *bool       `thrift:"updated,2" json:"updated,omitempty"`
}

func NewUpdateNoteIfUsnMatchesResult_() *UpdateNoteIfUsnMatchesResult_ {
	return &UpdateNoteIfUsnMatchesResult_{}
}

var UpdateNoteIfUsnMatchesResult__Note_DEFAULT *types.Note

func (p *UpdateNoteIfUsnMatchesResult_) GetNote() *types.Note {
	if !p.IsSetNote() {
		return UpdateNoteIfUsnMatchesResult__Note_DEFAULT
	}
	return p.Note
}

var UpdateNoteIfUsnMatchesResult__Updated_DEFAULT bool

func (p *UpdateNoteIfUsnMatchesResult_) GetUpdated() bool {
	if !p.IsSetUpdated() {
		return UpdateNoteIfUsnMatchesResult__Updated_DEFAULT
	}
	return *p.Updated
}
func (p *UpdateNoteIfUsnMatchesResult_) IsSetNote() bool {
	return p.Note != nil
}

func (p *UpdateNoteIfUsnMatchesResult_) IsSetUpdated() bool {
	return p.Updated != nil
}

func (p *UpdateNoteIfUsnMatchesResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateNoteIfUsnMatchesResult_) readField1(iprot thrift.TProtocol) error {
	p.Note = &types.Note{}
	if err := p.Note.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Note), err)
	}
	return nil
}

func (p *UpdateNoteIfUsnMatchesResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Updated = &v
	}
	return nil
}

func (p *UpdateNoteIfUsnMatchesResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateNoteIfUsnMatchesResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateNoteIfUsnMatchesResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNote() {
		if err := oprot.WriteFieldBegin("note", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:note: ", p), err)
		}
		if err := p.Note.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Note), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:note: ", p), err)
		}
	}
	return err
}

func (p *UpdateNoteIfUsnMatchesResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdated() {
		if err := oprot.WriteFieldBegin("updated", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updated: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Updated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updated (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updated: ", p), err)
		}
	}
	return err
}

func (p *UpdateNoteIfUsnMatchesResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNoteIfUsnMatchesResult_(%+v)", *p)
}

// Attributes:
//  - NoSetReadOnly
//  - NoSetReadPlusActivity
//  - NoSetModify
//  - NoSetFullAccess
type ShareRelationshipRestrictions struct {
	NoSetReadOnly         *bool `thrift:"noSetReadOnly,1" json:"noSetReadOnly,omitempty"`
	NoSetReadPlusActivity *bool `thrift:"noSetReadPlusActivity,2" json:"noSetReadPlusActivity,omitempty"`
	NoSetModify           *bool `thrift:"noSetModify,3" json:"noSetModify,omitempty"`
	NoSetFullAccess       *bool `thrift:"noSetFullAccess,4" json:"noSetFullAccess,omitempty"`
}

func NewShareRelationshipRestrictions() *ShareRelationshipRestrictions {
	return &ShareRelationshipRestrictions{}
}

var ShareRelationshipRestrictions_NoSetReadOnly_DEFAULT bool

func (p *ShareRelationshipRestrictions) GetNoSetReadOnly() bool {
	if !p.IsSetNoSetReadOnly() {
		return ShareRelationshipRestrictions_NoSetReadOnly_DEFAULT
	}
	return *p.NoSetReadOnly
}

var ShareRelationshipRestrictions_NoSetReadPlusActivity_DEFAULT bool

func (p *ShareRelationshipRestrictions) GetNoSetReadPlusActivity() bool {
	if !p.IsSetNoSetReadPlusActivity() {
		return ShareRelationshipRestrictions_NoSetReadPlusActivity_DEFAULT
	}
	return *p.NoSetReadPlusActivity
}

var ShareRelationshipRestrictions_NoSetModify_DEFAULT bool

func (p *ShareRelationshipRestrictions) GetNoSetModify() bool {
	if !p.IsSetNoSetModify() {
		return ShareRelationshipRestrictions_NoSetModify_DEFAULT
	}
	return *p.NoSetModify
}

var ShareRelationshipRestrictions_NoSetFullAccess_DEFAULT bool

func (p *ShareRelationshipRestrictions) GetNoSetFullAccess() bool {
	if !p.IsSetNoSetFullAccess() {
		return ShareRelationshipRestrictions_NoSetFullAccess_DEFAULT
	}
	return *p.NoSetFullAccess
}
func (p *ShareRelationshipRestrictions) IsSetNoSetReadOnly() bool {
	return p.NoSetReadOnly != nil
}

func (p *ShareRelationshipRestrictions) IsSetNoSetReadPlusActivity() bool {
	return p.NoSetReadPlusActivity != nil
}

func (p *ShareRelationshipRestrictions) IsSetNoSetModify() bool {
	return p.NoSetModify != nil
}

func (p *ShareRelationshipRestrictions) IsSetNoSetFullAccess() bool {
	return p.NoSetFullAccess != nil
}

func (p *ShareRelationshipRestrictions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShareRelationshipRestrictions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NoSetReadOnly = &v
	}
	return nil
}

func (p *ShareRelationshipRestrictions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NoSetReadPlusActivity = &v
	}
	return nil
}

func (p *ShareRelationshipRestrictions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NoSetModify = &v
	}
	return nil
}

func (p *ShareRelationshipRestrictions) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NoSetFullAccess = &v
	}
	return nil
}

func (p *ShareRelationshipRestrictions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShareRelationshipRestrictions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShareRelationshipRestrictions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetReadOnly() {
		if err := oprot.WriteFieldBegin("noSetReadOnly", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:noSetReadOnly: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoSetReadOnly)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noSetReadOnly (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:noSetReadOnly: ", p), err)
		}
	}
	return err
}

func (p *ShareRelationshipRestrictions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetReadPlusActivity() {
		if err := oprot.WriteFieldBegin("noSetReadPlusActivity", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noSetReadPlusActivity: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoSetReadPlusActivity)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noSetReadPlusActivity (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noSetReadPlusActivity: ", p), err)
		}
	}
	return err
}

func (p *ShareRelationshipRestrictions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetModify() {
		if err := oprot.WriteFieldBegin("noSetModify", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:noSetModify: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoSetModify)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noSetModify (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:noSetModify: ", p), err)
		}
	}
	return err
}

func (p *ShareRelationshipRestrictions) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetFullAccess() {
		if err := oprot.WriteFieldBegin("noSetFullAccess", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:noSetFullAccess: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoSetFullAccess)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noSetFullAccess (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:noSetFullAccess: ", p), err)
		}
	}
	return err
}

func (p *ShareRelationshipRestrictions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShareRelationshipRestrictions(%+v)", *p)
}

// Describes an invitation to a person to use their Evernote
// credentials to become a member of a notebook.
//
// <dl>
// <dt>displayName</dt>
// <dd>The string that clients should show to users to represent this
// invitation.</dd>
//
// <dt>recipientUserIdentity</dt>
// <dd>Identifies the recipient of the invitation. The user identity
// type can be either EMAIL or IDENTITYID, depending on whether the
// invitation was created using the classic notebook sharing APIs or
// the new identity-based notebook sharing APIs.
// </dd>
//
// <dt>privilege</dt>
// <dd>The privilege level at which the member will be joined, if it
// turns out that the member is not already joined at a higher level.
// Note that the <tt>identity</tt> field may not uniquely identify an
// Evernote User ID, and so we won't know until the invitation is
// redeemed whether or not the recipient already has privilege.</dd>
//
// <dt>sharerUserId</dt>
// <dd>The user id of the user who most recently shared this notebook
// to this identity. This field is used by the service to convey information
// to the user, so clients should treat it as read-only.</dd>
// </dl>
//
// Attributes:
//  - DisplayName
//  - RecipientUserIdentity
//  - Privilege
//  - SharerUserId
type InvitationShareRelationship struct {
	DisplayName           *string                          `thrift:"displayName,1" json:"displayName,omitempty"`
	RecipientUserIdentity *types.UserIdentity              `thrift:"recipientUserIdentity,2" json:"recipientUserIdentity,omitempty"`
	Privilege             *ShareRelationshipPrivilegeLevel `thrift:"privilege,3" json:"privilege,omitempty"`
	// unused field # 4
	SharerUserId *types.UserID `thrift:"sharerUserId,5" json:"sharerUserId,omitempty"`
}

func NewInvitationShareRelationship() *InvitationShareRelationship {
	return &InvitationShareRelationship{}
}

var InvitationShareRelationship_DisplayName_DEFAULT string

func (p *InvitationShareRelationship) GetDisplayName() string {
	if !p.IsSetDisplayName() {
		return InvitationShareRelationship_DisplayName_DEFAULT
	}
	return *p.DisplayName
}

var InvitationShareRelationship_RecipientUserIdentity_DEFAULT *types.UserIdentity

func (p *InvitationShareRelationship) GetRecipientUserIdentity() *types.UserIdentity {
	if !p.IsSetRecipientUserIdentity() {
		return InvitationShareRelationship_RecipientUserIdentity_DEFAULT
	}
	return p.RecipientUserIdentity
}

var InvitationShareRelationship_Privilege_DEFAULT ShareRelationshipPrivilegeLevel

func (p *InvitationShareRelationship) GetPrivilege() ShareRelationshipPrivilegeLevel {
	if !p.IsSetPrivilege() {
		return InvitationShareRelationship_Privilege_DEFAULT
	}
	return *p.Privilege
}

var InvitationShareRelationship_SharerUserId_DEFAULT types.UserID

func (p *InvitationShareRelationship) GetSharerUserId() types.UserID {
	if !p.IsSetSharerUserId() {
		return InvitationShareRelationship_SharerUserId_DEFAULT
	}
	return *p.SharerUserId
}
func (p *InvitationShareRelationship) IsSetDisplayName() bool {
	return p.DisplayName != nil
}

func (p *InvitationShareRelationship) IsSetRecipientUserIdentity() bool {
	return p.RecipientUserIdentity != nil
}

func (p *InvitationShareRelationship) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *InvitationShareRelationship) IsSetSharerUserId() bool {
	return p.SharerUserId != nil
}

func (p *InvitationShareRelationship) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InvitationShareRelationship) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DisplayName = &v
	}
	return nil
}

func (p *InvitationShareRelationship) readField2(iprot thrift.TProtocol) error {
	p.RecipientUserIdentity = &types.UserIdentity{}
	if err := p.RecipientUserIdentity.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RecipientUserIdentity), err)
	}
	return nil
}

func (p *InvitationShareRelationship) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ShareRelationshipPrivilegeLevel(v)
		p.Privilege = &temp
	}
	return nil
}

func (p *InvitationShareRelationship) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := types.UserID(v)
		p.SharerUserId = &temp
	}
	return nil
}

func (p *InvitationShareRelationship) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvitationShareRelationship"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvitationShareRelationship) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayName() {
		if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:displayName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DisplayName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.displayName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:displayName: ", p), err)
		}
	}
	return err
}

func (p *InvitationShareRelationship) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientUserIdentity() {
		if err := oprot.WriteFieldBegin("recipientUserIdentity", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recipientUserIdentity: ", p), err)
		}
		if err := p.RecipientUserIdentity.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RecipientUserIdentity), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recipientUserIdentity: ", p), err)
		}
	}
	return err
}

func (p *InvitationShareRelationship) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:privilege: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Privilege)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.privilege (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:privilege: ", p), err)
		}
	}
	return err
}

func (p *InvitationShareRelationship) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSharerUserId() {
		if err := oprot.WriteFieldBegin("sharerUserId", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sharerUserId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SharerUserId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sharerUserId (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sharerUserId: ", p), err)
		}
	}
	return err
}

func (p *InvitationShareRelationship) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvitationShareRelationship(%+v)", *p)
}

// Describes the association between a Notebook and an Evernote User who is
// a member of that notebook.
//
// <dl>
// <dt>displayName</dt>
// <dd>The string that clients should show to users to represent this
// member.</dd>
//
// <dt>recipientUserId</dt>
// <dd>The Evernote User ID of the recipient of this notebook share.
// </dd>
//
// <dt>bestPrivilege</dt>
// <dd>The privilege at which the member can access the notebook,
// which is the best privilege granted either individually or to a
// group to which a member belongs, such as a business.  This field is
// used by the service to convey information to the user, so clients
// should treat it as read-only.</dd>
//
// <dt>individualPrivilege</dt>
// <dd>The individually granted privilege for the member, which does
// not take GROUP privileges into account.  This value may be unset if
// only a group-assigned privilege has been granted to the member.
// This value can be managed by others with sufficient rights using
// the manageNotebookShares method.  The valid values that clients
// should present to users for selection are given via the the
// 'restrictions' field.</dd>
//
// <dt>restrictions</dt>
// <dd>The restrictions on which privileges may be individually
// assigned to the recipient of this share relationship.</dd>
//
// <dt>sharerUserId</dt>
// <dd>The user id of the user who most recently shared the notebook
// to this user. This field is currently unset for a MemberShareRelationship
// created by joining a notebook that has been published to the business
// (MemberShareRelationships where the individual privilege is unset).
// This field is used by the service to convey information to the user, so
// clients should treat it as read-only.
// </dd>
// </dl>
//
// Attributes:
//  - DisplayName
//  - RecipientUserId
//  - BestPrivilege
//  - IndividualPrivilege
//  - Restrictions
//  - SharerUserId
type MemberShareRelationship struct {
	DisplayName         *string                          `thrift:"displayName,1" json:"displayName,omitempty"`
	RecipientUserId     *types.UserID                    `thrift:"recipientUserId,2" json:"recipientUserId,omitempty"`
	BestPrivilege       *ShareRelationshipPrivilegeLevel `thrift:"bestPrivilege,3" json:"bestPrivilege,omitempty"`
	IndividualPrivilege *ShareRelationshipPrivilegeLevel `thrift:"individualPrivilege,4" json:"individualPrivilege,omitempty"`
	Restrictions        *ShareRelationshipRestrictions   `thrift:"restrictions,5" json:"restrictions,omitempty"`
	SharerUserId        *types.UserID                    `thrift:"sharerUserId,6" json:"sharerUserId,omitempty"`
}

func NewMemberShareRelationship() *MemberShareRelationship {
	return &MemberShareRelationship{}
}

var MemberShareRelationship_DisplayName_DEFAULT string

func (p *MemberShareRelationship) GetDisplayName() string {
	if !p.IsSetDisplayName() {
		return MemberShareRelationship_DisplayName_DEFAULT
	}
	return *p.DisplayName
}

var MemberShareRelationship_RecipientUserId_DEFAULT types.UserID

func (p *MemberShareRelationship) GetRecipientUserId() types.UserID {
	if !p.IsSetRecipientUserId() {
		return MemberShareRelationship_RecipientUserId_DEFAULT
	}
	return *p.RecipientUserId
}

var MemberShareRelationship_BestPrivilege_DEFAULT ShareRelationshipPrivilegeLevel

func (p *MemberShareRelationship) GetBestPrivilege() ShareRelationshipPrivilegeLevel {
	if !p.IsSetBestPrivilege() {
		return MemberShareRelationship_BestPrivilege_DEFAULT
	}
	return *p.BestPrivilege
}

var MemberShareRelationship_IndividualPrivilege_DEFAULT ShareRelationshipPrivilegeLevel

func (p *MemberShareRelationship) GetIndividualPrivilege() ShareRelationshipPrivilegeLevel {
	if !p.IsSetIndividualPrivilege() {
		return MemberShareRelationship_IndividualPrivilege_DEFAULT
	}
	return *p.IndividualPrivilege
}

var MemberShareRelationship_Restrictions_DEFAULT *ShareRelationshipRestrictions

func (p *MemberShareRelationship) GetRestrictions() *ShareRelationshipRestrictions {
	if !p.IsSetRestrictions() {
		return MemberShareRelationship_Restrictions_DEFAULT
	}
	return p.Restrictions
}

var MemberShareRelationship_SharerUserId_DEFAULT types.UserID

func (p *MemberShareRelationship) GetSharerUserId() types.UserID {
	if !p.IsSetSharerUserId() {
		return MemberShareRelationship_SharerUserId_DEFAULT
	}
	return *p.SharerUserId
}
func (p *MemberShareRelationship) IsSetDisplayName() bool {
	return p.DisplayName != nil
}

func (p *MemberShareRelationship) IsSetRecipientUserId() bool {
	return p.RecipientUserId != nil
}

func (p *MemberShareRelationship) IsSetBestPrivilege() bool {
	return p.BestPrivilege != nil
}

func (p *MemberShareRelationship) IsSetIndividualPrivilege() bool {
	return p.IndividualPrivilege != nil
}

func (p *MemberShareRelationship) IsSetRestrictions() bool {
	return p.Restrictions != nil
}

func (p *MemberShareRelationship) IsSetSharerUserId() bool {
	return p.SharerUserId != nil
}

func (p *MemberShareRelationship) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberShareRelationship) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DisplayName = &v
	}
	return nil
}

func (p *MemberShareRelationship) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.UserID(v)
		p.RecipientUserId = &temp
	}
	return nil
}

func (p *MemberShareRelationship) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ShareRelationshipPrivilegeLevel(v)
		p.BestPrivilege = &temp
	}
	return nil
}

func (p *MemberShareRelationship) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := ShareRelationshipPrivilegeLevel(v)
		p.IndividualPrivilege = &temp
	}
	return nil
}

func (p *MemberShareRelationship) readField5(iprot thrift.TProtocol) error {
	p.Restrictions = &ShareRelationshipRestrictions{}
	if err := p.Restrictions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Restrictions), err)
	}
	return nil
}

func (p *MemberShareRelationship) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := types.UserID(v)
		p.SharerUserId = &temp
	}
	return nil
}

func (p *MemberShareRelationship) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MemberShareRelationship"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberShareRelationship) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayName() {
		if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:displayName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DisplayName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.displayName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:displayName: ", p), err)
		}
	}
	return err
}

func (p *MemberShareRelationship) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientUserId() {
		if err := oprot.WriteFieldBegin("recipientUserId", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recipientUserId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.RecipientUserId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.recipientUserId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recipientUserId: ", p), err)
		}
	}
	return err
}

func (p *MemberShareRelationship) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBestPrivilege() {
		if err := oprot.WriteFieldBegin("bestPrivilege", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bestPrivilege: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.BestPrivilege)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bestPrivilege (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bestPrivilege: ", p), err)
		}
	}
	return err
}

func (p *MemberShareRelationship) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndividualPrivilege() {
		if err := oprot.WriteFieldBegin("individualPrivilege", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:individualPrivilege: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.IndividualPrivilege)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.individualPrivilege (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:individualPrivilege: ", p), err)
		}
	}
	return err
}

func (p *MemberShareRelationship) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRestrictions() {
		if err := oprot.WriteFieldBegin("restrictions", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:restrictions: ", p), err)
		}
		if err := p.Restrictions.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Restrictions), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:restrictions: ", p), err)
		}
	}
	return err
}

func (p *MemberShareRelationship) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSharerUserId() {
		if err := oprot.WriteFieldBegin("sharerUserId", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sharerUserId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SharerUserId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sharerUserId (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sharerUserId: ", p), err)
		}
	}
	return err
}

func (p *MemberShareRelationship) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberShareRelationship(%+v)", *p)
}

// Captures a collection of share relationships for a notebook, for
// example, as returned by the getNotebookShares method.  The share
// relationships fall into two broad categories: members, and
// invitations that can be used to become members.
//
// <dl>
// <dt>invitations</dt>
// <dd>A list of open invitations that can be redeemed into
// memberships to the notebook.</dd>
//
// <dt>memberships</dt>
// <dd>A list of memberships of the notebook.  A member is identified
// by their Evernote UserID and has rights to access the
// notebook.</dd>
//
// <dt>invitationRestrictions</dt>
// <dd>The restrictions on what privileges may be granted to invitees
// to this notebook. These restrictions may be specific to the calling
// user or to the notebook itself. They represent the
// union of all possible invite cases, so it is possible that once the
// recipient of the invitation has been identified by the service, such
// as by a business auto-join, the actual assigned privilege may change.
// </dd>
// </dl>
//
// Attributes:
//  - Invitations
//  - Memberships
//  - InvitationRestrictions
type ShareRelationships struct {
	Invitations            []*InvitationShareRelationship `thrift:"invitations,1" json:"invitations,omitempty"`
	Memberships            []*MemberShareRelationship     `thrift:"memberships,2" json:"memberships,omitempty"`
	InvitationRestrictions *ShareRelationshipRestrictions `thrift:"invitationRestrictions,3" json:"invitationRestrictions,omitempty"`
}

func NewShareRelationships() *ShareRelationships {
	return &ShareRelationships{}
}

var ShareRelationships_Invitations_DEFAULT []*InvitationShareRelationship

func (p *ShareRelationships) GetInvitations() []*InvitationShareRelationship {
	return p.Invitations
}

var ShareRelationships_Memberships_DEFAULT []*MemberShareRelationship

func (p *ShareRelationships) GetMemberships() []*MemberShareRelationship {
	return p.Memberships
}

var ShareRelationships_InvitationRestrictions_DEFAULT *ShareRelationshipRestrictions

func (p *ShareRelationships) GetInvitationRestrictions() *ShareRelationshipRestrictions {
	if !p.IsSetInvitationRestrictions() {
		return ShareRelationships_InvitationRestrictions_DEFAULT
	}
	return p.InvitationRestrictions
}
func (p *ShareRelationships) IsSetInvitations() bool {
	return p.Invitations != nil
}

func (p *ShareRelationships) IsSetMemberships() bool {
	return p.Memberships != nil
}

func (p *ShareRelationships) IsSetInvitationRestrictions() bool {
	return p.InvitationRestrictions != nil
}

func (p *ShareRelationships) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShareRelationships) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*InvitationShareRelationship, 0, size)
	p.Invitations = tSlice
	for i := 0; i < size; i++ {
		_elem33 := &InvitationShareRelationship{}
		if err := _elem33.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem33), err)
		}
		p.Invitations = append(p.Invitations, _elem33)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ShareRelationships) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MemberShareRelationship, 0, size)
	p.Memberships = tSlice
	for i := 0; i < size; i++ {
		_elem34 := &MemberShareRelationship{}
		if err := _elem34.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem34), err)
		}
		p.Memberships = append(p.Memberships, _elem34)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ShareRelationships) readField3(iprot thrift.TProtocol) error {
	p.InvitationRestrictions = &ShareRelationshipRestrictions{}
	if err := p.InvitationRestrictions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InvitationRestrictions), err)
	}
	return nil
}

func (p *ShareRelationships) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShareRelationships"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShareRelationships) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvitations() {
		if err := oprot.WriteFieldBegin("invitations", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:invitations: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Invitations)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Invitations {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:invitations: ", p), err)
		}
	}
	return err
}

func (p *ShareRelationships) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberships() {
		if err := oprot.WriteFieldBegin("memberships", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memberships: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Memberships)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Memberships {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memberships: ", p), err)
		}
	}
	return err
}

func (p *ShareRelationships) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvitationRestrictions() {
		if err := oprot.WriteFieldBegin("invitationRestrictions", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:invitationRestrictions: ", p), err)
		}
		if err := p.InvitationRestrictions.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InvitationRestrictions), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:invitationRestrictions: ", p), err)
		}
	}
	return err
}

func (p *ShareRelationships) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShareRelationships(%+v)", *p)
}

// A structure that captures parameters used by clients to manage the
// shares for a given notebook via the manageNotebookShares method.
//
// <dl>
// <dt>notebookGuid</dt>
// <dd>The GUID of the notebook whose shares are being managed.</dd>
//
// <dt>inviteMessage</dt>
// <dd>If the service sends a message to invitees, this parameter will
// be used to form the actual message that is sent.</dd>
//
// <dt>membershipsToUpdate</dt>
// <dd>The list of existing memberships to update.  This field is not
// intended to be the full set of memberships for the notebook and
// should only include those already-existing memberships that you
// actually want to change.  If you want to remove shares, see the
// unshares fields.  If you want to create a membership,
// i.e. auto-join a business user, you can do this via the
// invitationsToCreateOrUpdate field using an Evernote UserID of a
// fellow business member (the created invitation is automatically
// joined by the service, so the client is creating an
// invitation, not a membership).</dd>
//
// <dt>invitationsToCreateOrUpdate</dt>
// <dd>The list of invitations to update, as matched by the identity
// field of the InvitationShareRelationship instances, or to create if
// an existing invitation does not exist.  This field is not intended
// to be the full set of invitations on the notebook and should only
// include those invitations that you wish to create or update.  Note
// that your invitation could convert into a membership via a
// service-supported auto-join operation.  This happens, for example,
// when you use an invitation with an Evernote UserID type for a
// recipient who is a member of the business to which the notebook
// belongs.  Note that to discover the user IDs for business members,
// the sharer must also be part of the business.</dd>
//
// <dt>unshares</dt>
// <dd>The list of share relationships to expunge from the service.
// If the user identity is for an Evernote UserID, then memberships will
// be removed. If it's an e-mail, then e-mail based shared notebook
// invitations will be removed. If it's for an Identity ID, then
// any invitations that match the identity (by identity ID or user ID or
// e-mail for legacy invitations) will be removed.</dd>
// </dl>
//
// Attributes:
//  - NotebookGuid
//  - InviteMessage
//  - MembershipsToUpdate
//  - InvitationsToCreateOrUpdate
//  - Unshares
type ManageNotebookSharesParameters struct {
	NotebookGuid                *string                        `thrift:"notebookGuid,1" json:"notebookGuid,omitempty"`
	InviteMessage               *string                        `thrift:"inviteMessage,2" json:"inviteMessage,omitempty"`
	MembershipsToUpdate         []*MemberShareRelationship     `thrift:"membershipsToUpdate,3" json:"membershipsToUpdate,omitempty"`
	InvitationsToCreateOrUpdate []*InvitationShareRelationship `thrift:"invitationsToCreateOrUpdate,4" json:"invitationsToCreateOrUpdate,omitempty"`
	Unshares                    []*types.UserIdentity          `thrift:"unshares,5" json:"unshares,omitempty"`
}

func NewManageNotebookSharesParameters() *ManageNotebookSharesParameters {
	return &ManageNotebookSharesParameters{}
}

var ManageNotebookSharesParameters_NotebookGuid_DEFAULT string

func (p *ManageNotebookSharesParameters) GetNotebookGuid() string {
	if !p.IsSetNotebookGuid() {
		return ManageNotebookSharesParameters_NotebookGuid_DEFAULT
	}
	return *p.NotebookGuid
}

var ManageNotebookSharesParameters_InviteMessage_DEFAULT string

func (p *ManageNotebookSharesParameters) GetInviteMessage() string {
	if !p.IsSetInviteMessage() {
		return ManageNotebookSharesParameters_InviteMessage_DEFAULT
	}
	return *p.InviteMessage
}

var ManageNotebookSharesParameters_MembershipsToUpdate_DEFAULT []*MemberShareRelationship

func (p *ManageNotebookSharesParameters) GetMembershipsToUpdate() []*MemberShareRelationship {
	return p.MembershipsToUpdate
}

var ManageNotebookSharesParameters_InvitationsToCreateOrUpdate_DEFAULT []*InvitationShareRelationship

func (p *ManageNotebookSharesParameters) GetInvitationsToCreateOrUpdate() []*InvitationShareRelationship {
	return p.InvitationsToCreateOrUpdate
}

var ManageNotebookSharesParameters_Unshares_DEFAULT []*types.UserIdentity

func (p *ManageNotebookSharesParameters) GetUnshares() []*types.UserIdentity {
	return p.Unshares
}
func (p *ManageNotebookSharesParameters) IsSetNotebookGuid() bool {
	return p.NotebookGuid != nil
}

func (p *ManageNotebookSharesParameters) IsSetInviteMessage() bool {
	return p.InviteMessage != nil
}

func (p *ManageNotebookSharesParameters) IsSetMembershipsToUpdate() bool {
	return p.MembershipsToUpdate != nil
}

func (p *ManageNotebookSharesParameters) IsSetInvitationsToCreateOrUpdate() bool {
	return p.InvitationsToCreateOrUpdate != nil
}

func (p *ManageNotebookSharesParameters) IsSetUnshares() bool {
	return p.Unshares != nil
}

func (p *ManageNotebookSharesParameters) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManageNotebookSharesParameters) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NotebookGuid = &v
	}
	return nil
}

func (p *ManageNotebookSharesParameters) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.InviteMessage = &v
	}
	return nil
}

func (p *ManageNotebookSharesParameters) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MemberShareRelationship, 0, size)
	p.MembershipsToUpdate = tSlice
	for i := 0; i < size; i++ {
		_elem35 := &MemberShareRelationship{}
		if err := _elem35.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem35), err)
		}
		p.MembershipsToUpdate = append(p.MembershipsToUpdate, _elem35)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManageNotebookSharesParameters) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*InvitationShareRelationship, 0, size)
	p.InvitationsToCreateOrUpdate = tSlice
	for i := 0; i < size; i++ {
		_elem36 := &InvitationShareRelationship{}
		if err := _elem36.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
		}
		p.InvitationsToCreateOrUpdate = append(p.InvitationsToCreateOrUpdate, _elem36)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManageNotebookSharesParameters) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.UserIdentity, 0, size)
	p.Unshares = tSlice
	for i := 0; i < size; i++ {
		_elem37 := &types.UserIdentity{}
		if err := _elem37.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
		}
		p.Unshares = append(p.Unshares, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManageNotebookSharesParameters) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ManageNotebookSharesParameters"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManageNotebookSharesParameters) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notebookGuid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NotebookGuid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.notebookGuid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notebookGuid: ", p), err)
		}
	}
	return err
}

func (p *ManageNotebookSharesParameters) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInviteMessage() {
		if err := oprot.WriteFieldBegin("inviteMessage", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inviteMessage: ", p), err)
		}
		if err := oprot.WriteString(string(*p.InviteMessage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.inviteMessage (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inviteMessage: ", p), err)
		}
	}
	return err
}

func (p *ManageNotebookSharesParameters) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMembershipsToUpdate() {
		if err := oprot.WriteFieldBegin("membershipsToUpdate", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:membershipsToUpdate: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MembershipsToUpdate)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.MembershipsToUpdate {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:membershipsToUpdate: ", p), err)
		}
	}
	return err
}

func (p *ManageNotebookSharesParameters) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvitationsToCreateOrUpdate() {
		if err := oprot.WriteFieldBegin("invitationsToCreateOrUpdate", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:invitationsToCreateOrUpdate: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InvitationsToCreateOrUpdate)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.InvitationsToCreateOrUpdate {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:invitationsToCreateOrUpdate: ", p), err)
		}
	}
	return err
}

func (p *ManageNotebookSharesParameters) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnshares() {
		if err := oprot.WriteFieldBegin("unshares", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:unshares: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Unshares)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Unshares {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:unshares: ", p), err)
		}
	}
	return err
}

func (p *ManageNotebookSharesParameters) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManageNotebookSharesParameters(%+v)", *p)
}

// A structure to capture certain errors that occurred during a call
// to manageNotebookShares.  That method can be run best-effort,
// meaning that some change requests can be applied while others fail.
// Note that some errors such as system errors will still fail the
// entire transaction regardless of running best effort.  When some
// change requests do not succeed, the error conditions are captured
// in instances of this class, captured by the identity of the share
// relationship and one of the exception fields.
//
// <dl>
// <dt>userIdentity</dt>
// <dd>The identity of the share relationship whose update encountered
// an error.</dd>
//
// <dt>userException</dt>
// <dd>If the error is represented as an EDAMUserException that would
// have otherwise been thrown without best-effort execution.  Only one
// exception field will be set.</dd>
//
// <dt>notFoundException</dt>
// <dd>If the error is represented as an EDAMNotFoundException that would
// have otherwise been thrown without best-effort execution.  Only one
// exception field will be set.</dd>
// </dl>
//
// Attributes:
//  - UserIdentity
//  - UserException
//  - NotFoundException
type ManageNotebookSharesError struct {
	UserIdentity      *types.UserIdentity           `thrift:"userIdentity,1" json:"userIdentity,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,2" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewManageNotebookSharesError() *ManageNotebookSharesError {
	return &ManageNotebookSharesError{}
}

var ManageNotebookSharesError_UserIdentity_DEFAULT *types.UserIdentity

func (p *ManageNotebookSharesError) GetUserIdentity() *types.UserIdentity {
	if !p.IsSetUserIdentity() {
		return ManageNotebookSharesError_UserIdentity_DEFAULT
	}
	return p.UserIdentity
}

var ManageNotebookSharesError_UserException_DEFAULT *errors.EDAMUserException

func (p *ManageNotebookSharesError) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return ManageNotebookSharesError_UserException_DEFAULT
	}
	return p.UserException
}

var ManageNotebookSharesError_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *ManageNotebookSharesError) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return ManageNotebookSharesError_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *ManageNotebookSharesError) IsSetUserIdentity() bool {
	return p.UserIdentity != nil
}

func (p *ManageNotebookSharesError) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *ManageNotebookSharesError) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *ManageNotebookSharesError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManageNotebookSharesError) readField1(iprot thrift.TProtocol) error {
	p.UserIdentity = &types.UserIdentity{}
	if err := p.UserIdentity.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserIdentity), err)
	}
	return nil
}

func (p *ManageNotebookSharesError) readField2(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *ManageNotebookSharesError) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *ManageNotebookSharesError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ManageNotebookSharesError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManageNotebookSharesError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIdentity() {
		if err := oprot.WriteFieldBegin("userIdentity", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userIdentity: ", p), err)
		}
		if err := p.UserIdentity.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserIdentity), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userIdentity: ", p), err)
		}
	}
	return err
}

func (p *ManageNotebookSharesError) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userException: ", p), err)
		}
	}
	return err
}

func (p *ManageNotebookSharesError) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *ManageNotebookSharesError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManageNotebookSharesError(%+v)", *p)
}

// The return value of a call to the manageNotebookShares method.
//
// <dl>
// <dt>errors</dt>
// <dd>If the method completed without throwing exceptions, some errors
// might still have occurred, and in that case, this field will contain
// the list of those errors the occurred.
// </dd>
// </dl>
//
// Attributes:
//  - Errors
type ManageNotebookSharesResult_ struct {
	Errors []*ManageNotebookSharesError `thrift:"errors,1" json:"errors,omitempty"`
}

func NewManageNotebookSharesResult_() *ManageNotebookSharesResult_ {
	return &ManageNotebookSharesResult_{}
}

var ManageNotebookSharesResult__Errors_DEFAULT []*ManageNotebookSharesError

func (p *ManageNotebookSharesResult_) GetErrors() []*ManageNotebookSharesError {
	return p.Errors
}
func (p *ManageNotebookSharesResult_) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *ManageNotebookSharesResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManageNotebookSharesResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ManageNotebookSharesError, 0, size)
	p.Errors = tSlice
	for i := 0; i < size; i++ {
		_elem38 := &ManageNotebookSharesError{}
		if err := _elem38.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
		}
		p.Errors = append(p.Errors, _elem38)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManageNotebookSharesResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ManageNotebookSharesResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManageNotebookSharesResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err := oprot.WriteFieldBegin("errors", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errors: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Errors {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errors: ", p), err)
		}
	}
	return err
}

func (p *ManageNotebookSharesResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManageNotebookSharesResult_(%+v)", *p)
}

// A structure used to share a note with one or more recipients at a given privilege.
//
// <dl>
//   <dt>noteGuid</dt>
//   <dd>The GUID of the note.</dd>
//
//   <dt>recipientThreadId</dt>
//   <dd>The recipients of the note share specified as a messaging thread ID. If you
//       have an existing messaging thread to share the note with, specify its ID
//       here instead of recipientContacts in order to properly support defunct
//       identities. The sharer must be a participant of the thread. Either this
//       field or recipientContacts must be set.</dd>
//
//   <dt>recipientContacts</dt>
//   <dd>The recipients of the note share specified as a list of contacts. This should
//       only be set if the sharing takes place before the thread is created. Use
//       recipientThreadId instead when sharing with an existing thread. Either this
//       field or recipientThreadId must be set.</dd>
//
//   <dt>privilege</dt>
//   <dd>The privilege level to be granted.</dd>
// </dl>
//
// Attributes:
//  - NoteGuid
//  - RecipientThreadId
//  - RecipientContacts
//  - Privilege
type SharedNoteTemplate struct {
	NoteGuid          *types.GUID                     `thrift:"noteGuid,1" json:"noteGuid,omitempty"`
	RecipientContacts []*types.Contact                `thrift:"recipientContacts,2" json:"recipientContacts,omitempty"`
	Privilege         *types.SharedNotePrivilegeLevel `thrift:"privilege,3" json:"privilege,omitempty"`
	RecipientThreadId *types.MessageThreadID          `thrift:"recipientThreadId,4" json:"recipientThreadId,omitempty"`
}

func NewSharedNoteTemplate() *SharedNoteTemplate {
	return &SharedNoteTemplate{}
}

var SharedNoteTemplate_NoteGuid_DEFAULT types.GUID

func (p *SharedNoteTemplate) GetNoteGuid() types.GUID {
	if !p.IsSetNoteGuid() {
		return SharedNoteTemplate_NoteGuid_DEFAULT
	}
	return *p.NoteGuid
}

var SharedNoteTemplate_RecipientThreadId_DEFAULT types.MessageThreadID

func (p *SharedNoteTemplate) GetRecipientThreadId() types.MessageThreadID {
	if !p.IsSetRecipientThreadId() {
		return SharedNoteTemplate_RecipientThreadId_DEFAULT
	}
	return *p.RecipientThreadId
}

var SharedNoteTemplate_RecipientContacts_DEFAULT []*types.Contact

func (p *SharedNoteTemplate) GetRecipientContacts() []*types.Contact {
	return p.RecipientContacts
}

var SharedNoteTemplate_Privilege_DEFAULT types.SharedNotePrivilegeLevel

func (p *SharedNoteTemplate) GetPrivilege() types.SharedNotePrivilegeLevel {
	if !p.IsSetPrivilege() {
		return SharedNoteTemplate_Privilege_DEFAULT
	}
	return *p.Privilege
}
func (p *SharedNoteTemplate) IsSetNoteGuid() bool {
	return p.NoteGuid != nil
}

func (p *SharedNoteTemplate) IsSetRecipientThreadId() bool {
	return p.RecipientThreadId != nil
}

func (p *SharedNoteTemplate) IsSetRecipientContacts() bool {
	return p.RecipientContacts != nil
}

func (p *SharedNoteTemplate) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *SharedNoteTemplate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SharedNoteTemplate) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := types.GUID(v)
		p.NoteGuid = &temp
	}
	return nil
}

func (p *SharedNoteTemplate) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := types.MessageThreadID(v)
		p.RecipientThreadId = &temp
	}
	return nil
}

func (p *SharedNoteTemplate) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.Contact, 0, size)
	p.RecipientContacts = tSlice
	for i := 0; i < size; i++ {
		_elem39 := &types.Contact{}
		if err := _elem39.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
		}
		p.RecipientContacts = append(p.RecipientContacts, _elem39)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SharedNoteTemplate) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := types.SharedNotePrivilegeLevel(v)
		p.Privilege = &temp
	}
	return nil
}

func (p *SharedNoteTemplate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SharedNoteTemplate"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SharedNoteTemplate) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteGuid() {
		if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:noteGuid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NoteGuid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noteGuid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:noteGuid: ", p), err)
		}
	}
	return err
}

func (p *SharedNoteTemplate) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientContacts() {
		if err := oprot.WriteFieldBegin("recipientContacts", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recipientContacts: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecipientContacts)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.RecipientContacts {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recipientContacts: ", p), err)
		}
	}
	return err
}

func (p *SharedNoteTemplate) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:privilege: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Privilege)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.privilege (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:privilege: ", p), err)
		}
	}
	return err
}

func (p *SharedNoteTemplate) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientThreadId() {
		if err := oprot.WriteFieldBegin("recipientThreadId", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:recipientThreadId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RecipientThreadId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.recipientThreadId (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:recipientThreadId: ", p), err)
		}
	}
	return err
}

func (p *SharedNoteTemplate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SharedNoteTemplate(%+v)", *p)
}

// A structure used to share a notebook with one or more recipients at a given privilege.
//
// <dl>
//   <dt>notebookGuid</dt>
//   <dd>The GUID of the notebook.</dd>
//
//   <dt>recipientThreadId</dt>
//   <dd>The recipients of the notebook share specified as a messaging thread ID. If you
//       have an existing messaging thread to share the note with, specify its ID
//       here instead of recipientContacts in order to properly support defunct
//       identities. The sharer must be a participant of the thread. Either this field
//       or recipientContacts must be set.</dd>
//
//   <dt>recipientContacts</dt>
//   <dd>The recipients of the notebook share specified as a list of contacts. This should
//       only be set if the sharing takes place before the thread is created. Use
//       recipientThreadId instead when sharing with an existing thread. Either this
//       field or recipientThreadId must be set.</dd>
//
//   <dt>privilege</dt>
//   <dd>The privilege level to be granted.</dd>
// </dl>
//
// Attributes:
//  - NotebookGuid
//  - RecipientThreadId
//  - RecipientContacts
//  - Privilege
type NotebookShareTemplate struct {
	NotebookGuid      *types.GUID                         `thrift:"notebookGuid,1" json:"notebookGuid,omitempty"`
	RecipientContacts []*types.Contact                    `thrift:"recipientContacts,2" json:"recipientContacts,omitempty"`
	Privilege         *types.SharedNotebookPrivilegeLevel `thrift:"privilege,3" json:"privilege,omitempty"`
	RecipientThreadId *types.MessageThreadID              `thrift:"recipientThreadId,4" json:"recipientThreadId,omitempty"`
}

func NewNotebookShareTemplate() *NotebookShareTemplate {
	return &NotebookShareTemplate{}
}

var NotebookShareTemplate_NotebookGuid_DEFAULT types.GUID

func (p *NotebookShareTemplate) GetNotebookGuid() types.GUID {
	if !p.IsSetNotebookGuid() {
		return NotebookShareTemplate_NotebookGuid_DEFAULT
	}
	return *p.NotebookGuid
}

var NotebookShareTemplate_RecipientThreadId_DEFAULT types.MessageThreadID

func (p *NotebookShareTemplate) GetRecipientThreadId() types.MessageThreadID {
	if !p.IsSetRecipientThreadId() {
		return NotebookShareTemplate_RecipientThreadId_DEFAULT
	}
	return *p.RecipientThreadId
}

var NotebookShareTemplate_RecipientContacts_DEFAULT []*types.Contact

func (p *NotebookShareTemplate) GetRecipientContacts() []*types.Contact {
	return p.RecipientContacts
}

var NotebookShareTemplate_Privilege_DEFAULT types.SharedNotebookPrivilegeLevel

func (p *NotebookShareTemplate) GetPrivilege() types.SharedNotebookPrivilegeLevel {
	if !p.IsSetPrivilege() {
		return NotebookShareTemplate_Privilege_DEFAULT
	}
	return *p.Privilege
}
func (p *NotebookShareTemplate) IsSetNotebookGuid() bool {
	return p.NotebookGuid != nil
}

func (p *NotebookShareTemplate) IsSetRecipientThreadId() bool {
	return p.RecipientThreadId != nil
}

func (p *NotebookShareTemplate) IsSetRecipientContacts() bool {
	return p.RecipientContacts != nil
}

func (p *NotebookShareTemplate) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *NotebookShareTemplate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NotebookShareTemplate) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := types.GUID(v)
		p.NotebookGuid = &temp
	}
	return nil
}

func (p *NotebookShareTemplate) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := types.MessageThreadID(v)
		p.RecipientThreadId = &temp
	}
	return nil
}

func (p *NotebookShareTemplate) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.Contact, 0, size)
	p.RecipientContacts = tSlice
	for i := 0; i < size; i++ {
		_elem40 := &types.Contact{}
		if err := _elem40.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
		}
		p.RecipientContacts = append(p.RecipientContacts, _elem40)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NotebookShareTemplate) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := types.SharedNotebookPrivilegeLevel(v)
		p.Privilege = &temp
	}
	return nil
}

func (p *NotebookShareTemplate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotebookShareTemplate"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NotebookShareTemplate) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notebookGuid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NotebookGuid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.notebookGuid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notebookGuid: ", p), err)
		}
	}
	return err
}

func (p *NotebookShareTemplate) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientContacts() {
		if err := oprot.WriteFieldBegin("recipientContacts", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recipientContacts: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecipientContacts)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.RecipientContacts {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recipientContacts: ", p), err)
		}
	}
	return err
}

func (p *NotebookShareTemplate) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:privilege: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Privilege)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.privilege (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:privilege: ", p), err)
		}
	}
	return err
}

func (p *NotebookShareTemplate) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientThreadId() {
		if err := oprot.WriteFieldBegin("recipientThreadId", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:recipientThreadId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RecipientThreadId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.recipientThreadId (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:recipientThreadId: ", p), err)
		}
	}
	return err
}

func (p *NotebookShareTemplate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotebookShareTemplate(%+v)", *p)
}

// A structure containing the results of a call to createOrUpdateNotebookShares.
//
// <dl>
//   <dt>updateSequenceNum</dt>
//   <dd>The USN of the notebook after the call.</dd>
//
//   <dt>matchingShares</dt>
//   <dd>A list of SharedNotebook records that match the desired recipients. These
//       records may have been either created or updated by the call to
//       createOrUpdateNotebookShares, or they may have been at the desired privilege
//       privilege level prior to the call.</dd>
// </dl>
//
// Attributes:
//  - UpdateSequenceNum
//  - MatchingShares
type CreateOrUpdateNotebookSharesResult_ struct {
	UpdateSequenceNum *int32                  `thrift:"updateSequenceNum,1" json:"updateSequenceNum,omitempty"`
	MatchingShares    []*types.SharedNotebook `thrift:"matchingShares,2" json:"matchingShares,omitempty"`
}

func NewCreateOrUpdateNotebookSharesResult_() *CreateOrUpdateNotebookSharesResult_ {
	return &CreateOrUpdateNotebookSharesResult_{}
}

var CreateOrUpdateNotebookSharesResult__UpdateSequenceNum_DEFAULT int32

func (p *CreateOrUpdateNotebookSharesResult_) GetUpdateSequenceNum() int32 {
	if !p.IsSetUpdateSequenceNum() {
		return CreateOrUpdateNotebookSharesResult__UpdateSequenceNum_DEFAULT
	}
	return *p.UpdateSequenceNum
}

var CreateOrUpdateNotebookSharesResult__MatchingShares_DEFAULT []*types.SharedNotebook

func (p *CreateOrUpdateNotebookSharesResult_) GetMatchingShares() []*types.SharedNotebook {
	return p.MatchingShares
}
func (p *CreateOrUpdateNotebookSharesResult_) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != nil
}

func (p *CreateOrUpdateNotebookSharesResult_) IsSetMatchingShares() bool {
	return p.MatchingShares != nil
}

func (p *CreateOrUpdateNotebookSharesResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateOrUpdateNotebookSharesResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UpdateSequenceNum = &v
	}
	return nil
}

func (p *CreateOrUpdateNotebookSharesResult_) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.SharedNotebook, 0, size)
	p.MatchingShares = tSlice
	for i := 0; i < size; i++ {
		_elem41 := &types.SharedNotebook{}
		if err := _elem41.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem41), err)
		}
		p.MatchingShares = append(p.MatchingShares, _elem41)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CreateOrUpdateNotebookSharesResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateOrUpdateNotebookSharesResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateOrUpdateNotebookSharesResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateSequenceNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateSequenceNum: ", p), err)
		}
	}
	return err
}

func (p *CreateOrUpdateNotebookSharesResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMatchingShares() {
		if err := oprot.WriteFieldBegin("matchingShares", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:matchingShares: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MatchingShares)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.MatchingShares {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:matchingShares: ", p), err)
		}
	}
	return err
}

func (p *CreateOrUpdateNotebookSharesResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrUpdateNotebookSharesResult_(%+v)", *p)
}

// This structure is used by the service to communicate to clients, via
// getNoteShareRelationships, which privilege levels are assignable to the
// target of a note share relationship.
//
// <dl>
// <dt>noSetReadNote</dt>
// <dd>This value is true if the user is not allowed to set the privilege
// level to SharedNotePrivilegeLevel.READ_NOTE.</dd>
//
// <dt>noSetModifyNote</dt>
// <dd>This value is true if the user is not allowed to set the privilege
// level to SharedNotePrivilegeLevel.MODIFY_NOTE.</dd>
//
// <dt>noSetFullAccess</dt>
// <dd>This value is true if the user is not allowed to set the
// privilege level to SharedNotePrivilegeLevel.FULL_ACCESS.</dd>
// </dl>
//
// Attributes:
//  - NoSetReadNote
//  - NoSetModifyNote
//  - NoSetFullAccess
type NoteShareRelationshipRestrictions struct {
	NoSetReadNote   *bool `thrift:"noSetReadNote,1" json:"noSetReadNote,omitempty"`
	NoSetModifyNote *bool `thrift:"noSetModifyNote,2" json:"noSetModifyNote,omitempty"`
	NoSetFullAccess *bool `thrift:"noSetFullAccess,3" json:"noSetFullAccess,omitempty"`
}

func NewNoteShareRelationshipRestrictions() *NoteShareRelationshipRestrictions {
	return &NoteShareRelationshipRestrictions{}
}

var NoteShareRelationshipRestrictions_NoSetReadNote_DEFAULT bool

func (p *NoteShareRelationshipRestrictions) GetNoSetReadNote() bool {
	if !p.IsSetNoSetReadNote() {
		return NoteShareRelationshipRestrictions_NoSetReadNote_DEFAULT
	}
	return *p.NoSetReadNote
}

var NoteShareRelationshipRestrictions_NoSetModifyNote_DEFAULT bool

func (p *NoteShareRelationshipRestrictions) GetNoSetModifyNote() bool {
	if !p.IsSetNoSetModifyNote() {
		return NoteShareRelationshipRestrictions_NoSetModifyNote_DEFAULT
	}
	return *p.NoSetModifyNote
}

var NoteShareRelationshipRestrictions_NoSetFullAccess_DEFAULT bool

func (p *NoteShareRelationshipRestrictions) GetNoSetFullAccess() bool {
	if !p.IsSetNoSetFullAccess() {
		return NoteShareRelationshipRestrictions_NoSetFullAccess_DEFAULT
	}
	return *p.NoSetFullAccess
}
func (p *NoteShareRelationshipRestrictions) IsSetNoSetReadNote() bool {
	return p.NoSetReadNote != nil
}

func (p *NoteShareRelationshipRestrictions) IsSetNoSetModifyNote() bool {
	return p.NoSetModifyNote != nil
}

func (p *NoteShareRelationshipRestrictions) IsSetNoSetFullAccess() bool {
	return p.NoSetFullAccess != nil
}

func (p *NoteShareRelationshipRestrictions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteShareRelationshipRestrictions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NoSetReadNote = &v
	}
	return nil
}

func (p *NoteShareRelationshipRestrictions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NoSetModifyNote = &v
	}
	return nil
}

func (p *NoteShareRelationshipRestrictions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NoSetFullAccess = &v
	}
	return nil
}

func (p *NoteShareRelationshipRestrictions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteShareRelationshipRestrictions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteShareRelationshipRestrictions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetReadNote() {
		if err := oprot.WriteFieldBegin("noSetReadNote", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:noSetReadNote: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoSetReadNote)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noSetReadNote (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:noSetReadNote: ", p), err)
		}
	}
	return err
}

func (p *NoteShareRelationshipRestrictions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetModifyNote() {
		if err := oprot.WriteFieldBegin("noSetModifyNote", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noSetModifyNote: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoSetModifyNote)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noSetModifyNote (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noSetModifyNote: ", p), err)
		}
	}
	return err
}

func (p *NoteShareRelationshipRestrictions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetFullAccess() {
		if err := oprot.WriteFieldBegin("noSetFullAccess", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:noSetFullAccess: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoSetFullAccess)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noSetFullAccess (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:noSetFullAccess: ", p), err)
		}
	}
	return err
}

func (p *NoteShareRelationshipRestrictions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteShareRelationshipRestrictions(%+v)", *p)
}

// Describes the association between a Note and an Evernote User who is
// a member of that note.
//
// <dl>
// <dt>displayName</dt>
// <dd>The string that clients should show to users to represent this
// member.</dd>
//
// <dt>recipientUserId</dt>
// <dd>The Evernote UserID of the user who is a member to the note.</dd>
//
// <dt>privilege</dt>
// <dd>The privilege at which the member can access the note,
// which is the best privilege granted to the user across all of their
// individual shares for this note. This field is used by the service
// to convey information to the user, so clients should treat it as
// read-only.</dd>
//
// <dt>restrictions</dt>
// <dd>The restrictions on which privileges may be individually
// assigned to the recipient of this share relationship. This field
// is used by the service to convey information to the user, so
// clients should treat it as read-only.</dd>
//
// <dt>sharerUserId</dt>
// <dd>The user id of the user who most recently shared the note with
// this user. This field is used by the service to convey information
// to the user, so clients should treat it as read-only.</dd>
// </dl>
//
// Attributes:
//  - DisplayName
//  - RecipientUserId
//  - Privilege
//  - Restrictions
//  - SharerUserId
type NoteMemberShareRelationship struct {
	DisplayName     *string                            `thrift:"displayName,1" json:"displayName,omitempty"`
	RecipientUserId *types.UserID                      `thrift:"recipientUserId,2" json:"recipientUserId,omitempty"`
	Privilege       *types.SharedNotePrivilegeLevel    `thrift:"privilege,3" json:"privilege,omitempty"`
	Restrictions    *NoteShareRelationshipRestrictions `thrift:"restrictions,4" json:"restrictions,omitempty"`
	SharerUserId    *types.UserID                      `thrift:"sharerUserId,5" json:"sharerUserId,omitempty"`
}

func NewNoteMemberShareRelationship() *NoteMemberShareRelationship {
	return &NoteMemberShareRelationship{}
}

var NoteMemberShareRelationship_DisplayName_DEFAULT string

func (p *NoteMemberShareRelationship) GetDisplayName() string {
	if !p.IsSetDisplayName() {
		return NoteMemberShareRelationship_DisplayName_DEFAULT
	}
	return *p.DisplayName
}

var NoteMemberShareRelationship_RecipientUserId_DEFAULT types.UserID

func (p *NoteMemberShareRelationship) GetRecipientUserId() types.UserID {
	if !p.IsSetRecipientUserId() {
		return NoteMemberShareRelationship_RecipientUserId_DEFAULT
	}
	return *p.RecipientUserId
}

var NoteMemberShareRelationship_Privilege_DEFAULT types.SharedNotePrivilegeLevel

func (p *NoteMemberShareRelationship) GetPrivilege() types.SharedNotePrivilegeLevel {
	if !p.IsSetPrivilege() {
		return NoteMemberShareRelationship_Privilege_DEFAULT
	}
	return *p.Privilege
}

var NoteMemberShareRelationship_Restrictions_DEFAULT *NoteShareRelationshipRestrictions

func (p *NoteMemberShareRelationship) GetRestrictions() *NoteShareRelationshipRestrictions {
	if !p.IsSetRestrictions() {
		return NoteMemberShareRelationship_Restrictions_DEFAULT
	}
	return p.Restrictions
}

var NoteMemberShareRelationship_SharerUserId_DEFAULT types.UserID

func (p *NoteMemberShareRelationship) GetSharerUserId() types.UserID {
	if !p.IsSetSharerUserId() {
		return NoteMemberShareRelationship_SharerUserId_DEFAULT
	}
	return *p.SharerUserId
}
func (p *NoteMemberShareRelationship) IsSetDisplayName() bool {
	return p.DisplayName != nil
}

func (p *NoteMemberShareRelationship) IsSetRecipientUserId() bool {
	return p.RecipientUserId != nil
}

func (p *NoteMemberShareRelationship) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *NoteMemberShareRelationship) IsSetRestrictions() bool {
	return p.Restrictions != nil
}

func (p *NoteMemberShareRelationship) IsSetSharerUserId() bool {
	return p.SharerUserId != nil
}

func (p *NoteMemberShareRelationship) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteMemberShareRelationship) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DisplayName = &v
	}
	return nil
}

func (p *NoteMemberShareRelationship) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.UserID(v)
		p.RecipientUserId = &temp
	}
	return nil
}

func (p *NoteMemberShareRelationship) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := types.SharedNotePrivilegeLevel(v)
		p.Privilege = &temp
	}
	return nil
}

func (p *NoteMemberShareRelationship) readField4(iprot thrift.TProtocol) error {
	p.Restrictions = &NoteShareRelationshipRestrictions{}
	if err := p.Restrictions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Restrictions), err)
	}
	return nil
}

func (p *NoteMemberShareRelationship) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := types.UserID(v)
		p.SharerUserId = &temp
	}
	return nil
}

func (p *NoteMemberShareRelationship) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteMemberShareRelationship"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteMemberShareRelationship) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayName() {
		if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:displayName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DisplayName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.displayName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:displayName: ", p), err)
		}
	}
	return err
}

func (p *NoteMemberShareRelationship) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientUserId() {
		if err := oprot.WriteFieldBegin("recipientUserId", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recipientUserId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.RecipientUserId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.recipientUserId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recipientUserId: ", p), err)
		}
	}
	return err
}

func (p *NoteMemberShareRelationship) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:privilege: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Privilege)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.privilege (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:privilege: ", p), err)
		}
	}
	return err
}

func (p *NoteMemberShareRelationship) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRestrictions() {
		if err := oprot.WriteFieldBegin("restrictions", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:restrictions: ", p), err)
		}
		if err := p.Restrictions.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Restrictions), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:restrictions: ", p), err)
		}
	}
	return err
}

func (p *NoteMemberShareRelationship) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSharerUserId() {
		if err := oprot.WriteFieldBegin("sharerUserId", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sharerUserId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SharerUserId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sharerUserId (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sharerUserId: ", p), err)
		}
	}
	return err
}

func (p *NoteMemberShareRelationship) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteMemberShareRelationship(%+v)", *p)
}

// Describes an invitation to a person to use their Evernote credentials
// to gain access to a note belonging to another user.
//
// <dl>
// <dt>displayName</dt>
// <dd>The string that clients should show to users to represent this
// invitation.</dd>
//
// <dt>recipientIdentityId</dt>
// <dd>Identifies the identity of the invitation recipient. Once the
// identity has been claimed by an Evernote user and they have accessed
// the note at least once, the invitation will be used up and will no
// longer be returned by the service to clients. Instead, that recipient
// will be included in the list of NoteMemberShareRelationships.</dd>
//
// <dt>privilege</dt>
// <dd>The privilege level that the recipient will be granted when they
// accept this invitation. If the user already has a higher privilege to
// access this note then this will not affect the recipient's privileges.</dd>
//
// <dt>sharerUserId</dt>
// <dd>The user id of the user who most recently shared this note to this
// recipient. This field is used by the service to convey information
// to the user, so clients should treat it as read-only.</dd>
//
// Attributes:
//  - DisplayName
//  - RecipientIdentityId
//  - Privilege
//  - SharerUserId
type NoteInvitationShareRelationship struct {
	DisplayName         *string                         `thrift:"displayName,1" json:"displayName,omitempty"`
	RecipientIdentityId *types.IdentityID               `thrift:"recipientIdentityId,2" json:"recipientIdentityId,omitempty"`
	Privilege           *types.SharedNotePrivilegeLevel `thrift:"privilege,3" json:"privilege,omitempty"`
	// unused field # 4
	SharerUserId *types.UserID `thrift:"sharerUserId,5" json:"sharerUserId,omitempty"`
}

func NewNoteInvitationShareRelationship() *NoteInvitationShareRelationship {
	return &NoteInvitationShareRelationship{}
}

var NoteInvitationShareRelationship_DisplayName_DEFAULT string

func (p *NoteInvitationShareRelationship) GetDisplayName() string {
	if !p.IsSetDisplayName() {
		return NoteInvitationShareRelationship_DisplayName_DEFAULT
	}
	return *p.DisplayName
}

var NoteInvitationShareRelationship_RecipientIdentityId_DEFAULT types.IdentityID

func (p *NoteInvitationShareRelationship) GetRecipientIdentityId() types.IdentityID {
	if !p.IsSetRecipientIdentityId() {
		return NoteInvitationShareRelationship_RecipientIdentityId_DEFAULT
	}
	return *p.RecipientIdentityId
}

var NoteInvitationShareRelationship_Privilege_DEFAULT types.SharedNotePrivilegeLevel

func (p *NoteInvitationShareRelationship) GetPrivilege() types.SharedNotePrivilegeLevel {
	if !p.IsSetPrivilege() {
		return NoteInvitationShareRelationship_Privilege_DEFAULT
	}
	return *p.Privilege
}

var NoteInvitationShareRelationship_SharerUserId_DEFAULT types.UserID

func (p *NoteInvitationShareRelationship) GetSharerUserId() types.UserID {
	if !p.IsSetSharerUserId() {
		return NoteInvitationShareRelationship_SharerUserId_DEFAULT
	}
	return *p.SharerUserId
}
func (p *NoteInvitationShareRelationship) IsSetDisplayName() bool {
	return p.DisplayName != nil
}

func (p *NoteInvitationShareRelationship) IsSetRecipientIdentityId() bool {
	return p.RecipientIdentityId != nil
}

func (p *NoteInvitationShareRelationship) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *NoteInvitationShareRelationship) IsSetSharerUserId() bool {
	return p.SharerUserId != nil
}

func (p *NoteInvitationShareRelationship) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteInvitationShareRelationship) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DisplayName = &v
	}
	return nil
}

func (p *NoteInvitationShareRelationship) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.IdentityID(v)
		p.RecipientIdentityId = &temp
	}
	return nil
}

func (p *NoteInvitationShareRelationship) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := types.SharedNotePrivilegeLevel(v)
		p.Privilege = &temp
	}
	return nil
}

func (p *NoteInvitationShareRelationship) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := types.UserID(v)
		p.SharerUserId = &temp
	}
	return nil
}

func (p *NoteInvitationShareRelationship) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteInvitationShareRelationship"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteInvitationShareRelationship) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayName() {
		if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:displayName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DisplayName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.displayName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:displayName: ", p), err)
		}
	}
	return err
}

func (p *NoteInvitationShareRelationship) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientIdentityId() {
		if err := oprot.WriteFieldBegin("recipientIdentityId", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recipientIdentityId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RecipientIdentityId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.recipientIdentityId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recipientIdentityId: ", p), err)
		}
	}
	return err
}

func (p *NoteInvitationShareRelationship) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:privilege: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Privilege)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.privilege (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:privilege: ", p), err)
		}
	}
	return err
}

func (p *NoteInvitationShareRelationship) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSharerUserId() {
		if err := oprot.WriteFieldBegin("sharerUserId", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sharerUserId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SharerUserId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sharerUserId (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sharerUserId: ", p), err)
		}
	}
	return err
}

func (p *NoteInvitationShareRelationship) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteInvitationShareRelationship(%+v)", *p)
}

// Captures a collection of share relationships for a single note,
// for example, as returned by the getNoteShares method. The share
// relationships fall into two broad categories: members, and
// invitations that can be used to become members.
//
// <dl>
// <dt>invitations</dt>
// <dd>A list of open invitations that can be redeemed into
// memberships to the note.</dd>
//
// <dt>memberships</dt>
// <dd>A list of memberships of the noteb. A member is identified
// by their Evernote UserID and has rights to access the
// note.</dd>
//
// <dt>restrictions</dt>
// <dd>The restrictions on which privileges may be assigned to the recipient
// of an open invitation. These restrictions only apply to invitations;
// restrictions on memberships are specified on the NoteMemberShareRelationship.
// This field is used by the service to convey information to the user, so
// clients should treat it as read-only.</dd>
//
// </dl>
//
// Attributes:
//  - Invitations
//  - Memberships
//  - InvitationRestrictions
type NoteShareRelationships struct {
	Invitations            []*NoteInvitationShareRelationship `thrift:"invitations,1" json:"invitations,omitempty"`
	Memberships            []*NoteMemberShareRelationship     `thrift:"memberships,2" json:"memberships,omitempty"`
	InvitationRestrictions *NoteShareRelationshipRestrictions `thrift:"invitationRestrictions,3" json:"invitationRestrictions,omitempty"`
}

func NewNoteShareRelationships() *NoteShareRelationships {
	return &NoteShareRelationships{}
}

var NoteShareRelationships_Invitations_DEFAULT []*NoteInvitationShareRelationship

func (p *NoteShareRelationships) GetInvitations() []*NoteInvitationShareRelationship {
	return p.Invitations
}

var NoteShareRelationships_Memberships_DEFAULT []*NoteMemberShareRelationship

func (p *NoteShareRelationships) GetMemberships() []*NoteMemberShareRelationship {
	return p.Memberships
}

var NoteShareRelationships_InvitationRestrictions_DEFAULT *NoteShareRelationshipRestrictions

func (p *NoteShareRelationships) GetInvitationRestrictions() *NoteShareRelationshipRestrictions {
	if !p.IsSetInvitationRestrictions() {
		return NoteShareRelationships_InvitationRestrictions_DEFAULT
	}
	return p.InvitationRestrictions
}
func (p *NoteShareRelationships) IsSetInvitations() bool {
	return p.Invitations != nil
}

func (p *NoteShareRelationships) IsSetMemberships() bool {
	return p.Memberships != nil
}

func (p *NoteShareRelationships) IsSetInvitationRestrictions() bool {
	return p.InvitationRestrictions != nil
}

func (p *NoteShareRelationships) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteShareRelationships) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NoteInvitationShareRelationship, 0, size)
	p.Invitations = tSlice
	for i := 0; i < size; i++ {
		_elem42 := &NoteInvitationShareRelationship{}
		if err := _elem42.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
		}
		p.Invitations = append(p.Invitations, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteShareRelationships) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NoteMemberShareRelationship, 0, size)
	p.Memberships = tSlice
	for i := 0; i < size; i++ {
		_elem43 := &NoteMemberShareRelationship{}
		if err := _elem43.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem43), err)
		}
		p.Memberships = append(p.Memberships, _elem43)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteShareRelationships) readField3(iprot thrift.TProtocol) error {
	p.InvitationRestrictions = &NoteShareRelationshipRestrictions{}
	if err := p.InvitationRestrictions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InvitationRestrictions), err)
	}
	return nil
}

func (p *NoteShareRelationships) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteShareRelationships"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteShareRelationships) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvitations() {
		if err := oprot.WriteFieldBegin("invitations", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:invitations: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Invitations)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Invitations {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:invitations: ", p), err)
		}
	}
	return err
}

func (p *NoteShareRelationships) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberships() {
		if err := oprot.WriteFieldBegin("memberships", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memberships: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Memberships)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Memberships {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memberships: ", p), err)
		}
	}
	return err
}

func (p *NoteShareRelationships) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvitationRestrictions() {
		if err := oprot.WriteFieldBegin("invitationRestrictions", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:invitationRestrictions: ", p), err)
		}
		if err := p.InvitationRestrictions.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InvitationRestrictions), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:invitationRestrictions: ", p), err)
		}
	}
	return err
}

func (p *NoteShareRelationships) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteShareRelationships(%+v)", *p)
}

// Captures parameters used by clients to manage the shares for a given
// note via the manageNoteShares function. This is used only to manage
// the existing memberships and invitations for a note. To invite a new
// recipient, use NoteStore.createOrUpdateSharedNotes.
//
// The only field of an existing membership or invitation that can be
// updated by this function is the share privilege.
//
// <dl>
//   <dt>noteGuid</dt>
//   <dd>The GUID of the note whose shares are being managed.</dd>
//
//   <dt>membershipsToUpdate</dt>
//   <dd>A list of existing memberships to update. This field is not
//     meant to be the full set of memberships for the note. Clients
//     should only include those existing memberships that they wish
//     to modify. To remove an existing membership, see the unshares
//     field.</dd>
//
//   <dt>invitationsToUpdate</dt>
//   <dd>The list of outstanding invitations to update, as matched by the
//     identity field of the NoteInvitationShareRelatioship instances.
//     This field is not meant to be the full set of invitations for the
//     note. Clients should only include those existing invitations that
//     they wish to modify.</dd>
//
//   <dt>membershipsToUnshare</dt>
//   <dd>A list of existing memberships to expunge from the service.</dd>
//
//   <dt>invitationsToUnshare</dt>
//   <dd>A list of outstanding invitations to expunge from the service.</dd>
// </dl>
//
// Attributes:
//  - NoteGuid
//  - MembershipsToUpdate
//  - InvitationsToUpdate
//  - MembershipsToUnshare
//  - InvitationsToUnshare
type ManageNoteSharesParameters struct {
	NoteGuid             *string                            `thrift:"noteGuid,1" json:"noteGuid,omitempty"`
	MembershipsToUpdate  []*NoteMemberShareRelationship     `thrift:"membershipsToUpdate,2" json:"membershipsToUpdate,omitempty"`
	InvitationsToUpdate  []*NoteInvitationShareRelationship `thrift:"invitationsToUpdate,3" json:"invitationsToUpdate,omitempty"`
	MembershipsToUnshare []int32                            `thrift:"membershipsToUnshare,4" json:"membershipsToUnshare,omitempty"`
	InvitationsToUnshare []int64                            `thrift:"invitationsToUnshare,5" json:"invitationsToUnshare,omitempty"`
}

func NewManageNoteSharesParameters() *ManageNoteSharesParameters {
	return &ManageNoteSharesParameters{}
}

var ManageNoteSharesParameters_NoteGuid_DEFAULT string

func (p *ManageNoteSharesParameters) GetNoteGuid() string {
	if !p.IsSetNoteGuid() {
		return ManageNoteSharesParameters_NoteGuid_DEFAULT
	}
	return *p.NoteGuid
}

var ManageNoteSharesParameters_MembershipsToUpdate_DEFAULT []*NoteMemberShareRelationship

func (p *ManageNoteSharesParameters) GetMembershipsToUpdate() []*NoteMemberShareRelationship {
	return p.MembershipsToUpdate
}

var ManageNoteSharesParameters_InvitationsToUpdate_DEFAULT []*NoteInvitationShareRelationship

func (p *ManageNoteSharesParameters) GetInvitationsToUpdate() []*NoteInvitationShareRelationship {
	return p.InvitationsToUpdate
}

var ManageNoteSharesParameters_MembershipsToUnshare_DEFAULT []int32

func (p *ManageNoteSharesParameters) GetMembershipsToUnshare() []int32 {
	return p.MembershipsToUnshare
}

var ManageNoteSharesParameters_InvitationsToUnshare_DEFAULT []int64

func (p *ManageNoteSharesParameters) GetInvitationsToUnshare() []int64 {
	return p.InvitationsToUnshare
}
func (p *ManageNoteSharesParameters) IsSetNoteGuid() bool {
	return p.NoteGuid != nil
}

func (p *ManageNoteSharesParameters) IsSetMembershipsToUpdate() bool {
	return p.MembershipsToUpdate != nil
}

func (p *ManageNoteSharesParameters) IsSetInvitationsToUpdate() bool {
	return p.InvitationsToUpdate != nil
}

func (p *ManageNoteSharesParameters) IsSetMembershipsToUnshare() bool {
	return p.MembershipsToUnshare != nil
}

func (p *ManageNoteSharesParameters) IsSetInvitationsToUnshare() bool {
	return p.InvitationsToUnshare != nil
}

func (p *ManageNoteSharesParameters) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManageNoteSharesParameters) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NoteGuid = &v
	}
	return nil
}

func (p *ManageNoteSharesParameters) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NoteMemberShareRelationship, 0, size)
	p.MembershipsToUpdate = tSlice
	for i := 0; i < size; i++ {
		_elem44 := &NoteMemberShareRelationship{}
		if err := _elem44.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem44), err)
		}
		p.MembershipsToUpdate = append(p.MembershipsToUpdate, _elem44)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManageNoteSharesParameters) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NoteInvitationShareRelationship, 0, size)
	p.InvitationsToUpdate = tSlice
	for i := 0; i < size; i++ {
		_elem45 := &NoteInvitationShareRelationship{}
		if err := _elem45.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem45), err)
		}
		p.InvitationsToUpdate = append(p.InvitationsToUpdate, _elem45)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManageNoteSharesParameters) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.MembershipsToUnshare = tSlice
	for i := 0; i < size; i++ {
		var _elem46 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem46 = v
		}
		p.MembershipsToUnshare = append(p.MembershipsToUnshare, _elem46)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManageNoteSharesParameters) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.InvitationsToUnshare = tSlice
	for i := 0; i < size; i++ {
		var _elem47 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem47 = v
		}
		p.InvitationsToUnshare = append(p.InvitationsToUnshare, _elem47)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManageNoteSharesParameters) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ManageNoteSharesParameters"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManageNoteSharesParameters) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteGuid() {
		if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:noteGuid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NoteGuid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noteGuid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:noteGuid: ", p), err)
		}
	}
	return err
}

func (p *ManageNoteSharesParameters) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMembershipsToUpdate() {
		if err := oprot.WriteFieldBegin("membershipsToUpdate", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:membershipsToUpdate: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MembershipsToUpdate)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.MembershipsToUpdate {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:membershipsToUpdate: ", p), err)
		}
	}
	return err
}

func (p *ManageNoteSharesParameters) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvitationsToUpdate() {
		if err := oprot.WriteFieldBegin("invitationsToUpdate", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:invitationsToUpdate: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InvitationsToUpdate)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.InvitationsToUpdate {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:invitationsToUpdate: ", p), err)
		}
	}
	return err
}

func (p *ManageNoteSharesParameters) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMembershipsToUnshare() {
		if err := oprot.WriteFieldBegin("membershipsToUnshare", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:membershipsToUnshare: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.MembershipsToUnshare)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.MembershipsToUnshare {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:membershipsToUnshare: ", p), err)
		}
	}
	return err
}

func (p *ManageNoteSharesParameters) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvitationsToUnshare() {
		if err := oprot.WriteFieldBegin("invitationsToUnshare", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:invitationsToUnshare: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.InvitationsToUnshare)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.InvitationsToUnshare {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:invitationsToUnshare: ", p), err)
		}
	}
	return err
}

func (p *ManageNoteSharesParameters) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManageNoteSharesParameters(%+v)", *p)
}

// Captures errors that occur during a call to manageNoteShares. That
// function can be run best-effort, meaning that some change requests can
// be applied while others fail. Note that some errors such as system
// exceptions may still cause the entire call to fail.
//
// Only one of the two ID fields will be set on a given error.
//
// Only one of the two exception fields will be set on a given error.
//
// <dl>
//   <dt>identityID</dt>
//   <dd>The identity ID of an outstanding invitation that was not updated
//     due to the error.</dd>
//
//   <dt>userID</dt>
//   <dd>The user ID of an existing membership that was not updated due
//     to the error.</dd>
//
//   <dt>userException</dt>
//   <dd>If the error is represented as an EDAMUserException that would
//     have otherwise been thrown without best-effort execution.</dd>
//
//   <dt>notFoundException</dt>
//   <dd>If the error is represented as an EDAMNotFoundException that
//     would have otherwise been thrown without best-effort execution.
//     The identifier field of the exception will be either "Identity.id"
//     or "User.id", indicating that no existing share could be found for
//     the specified recipient.</dd>
// </dl>
//
// Attributes:
//  - IdentityID
//  - UserID
//  - UserException
//  - NotFoundException
type ManageNoteSharesError struct {
	IdentityID        *types.IdentityID             `thrift:"identityID,1" json:"identityID,omitempty"`
	UserID            *types.UserID                 `thrift:"userID,2" json:"userID,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,3" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,4" json:"notFoundException,omitempty"`
}

func NewManageNoteSharesError() *ManageNoteSharesError {
	return &ManageNoteSharesError{}
}

var ManageNoteSharesError_IdentityID_DEFAULT types.IdentityID

func (p *ManageNoteSharesError) GetIdentityID() types.IdentityID {
	if !p.IsSetIdentityID() {
		return ManageNoteSharesError_IdentityID_DEFAULT
	}
	return *p.IdentityID
}

var ManageNoteSharesError_UserID_DEFAULT types.UserID

func (p *ManageNoteSharesError) GetUserID() types.UserID {
	if !p.IsSetUserID() {
		return ManageNoteSharesError_UserID_DEFAULT
	}
	return *p.UserID
}

var ManageNoteSharesError_UserException_DEFAULT *errors.EDAMUserException

func (p *ManageNoteSharesError) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return ManageNoteSharesError_UserException_DEFAULT
	}
	return p.UserException
}

var ManageNoteSharesError_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *ManageNoteSharesError) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return ManageNoteSharesError_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *ManageNoteSharesError) IsSetIdentityID() bool {
	return p.IdentityID != nil
}

func (p *ManageNoteSharesError) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *ManageNoteSharesError) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *ManageNoteSharesError) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *ManageNoteSharesError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManageNoteSharesError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := types.IdentityID(v)
		p.IdentityID = &temp
	}
	return nil
}

func (p *ManageNoteSharesError) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.UserID(v)
		p.UserID = &temp
	}
	return nil
}

func (p *ManageNoteSharesError) readField3(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *ManageNoteSharesError) readField4(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *ManageNoteSharesError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ManageNoteSharesError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManageNoteSharesError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdentityID() {
		if err := oprot.WriteFieldBegin("identityID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:identityID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IdentityID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.identityID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:identityID: ", p), err)
		}
	}
	return err
}

func (p *ManageNoteSharesError) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userID: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userID: ", p), err)
		}
	}
	return err
}

func (p *ManageNoteSharesError) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userException: ", p), err)
		}
	}
	return err
}

func (p *ManageNoteSharesError) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *ManageNoteSharesError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManageNoteSharesError(%+v)", *p)
}

// The return value of a call to the manageNoteShares function.
//
// <dl>
//   <dt>errors</dt>
//   <dd>If the call succeeded without throwing an exception, some errors
//     might still have occurred. In that case, this field will contain the
//     list of errors.</dd>
// </dl>
//
// Attributes:
//  - Errors
type ManageNoteSharesResult_ struct {
	Errors []*ManageNoteSharesError `thrift:"errors,1" json:"errors,omitempty"`
}

func NewManageNoteSharesResult_() *ManageNoteSharesResult_ {
	return &ManageNoteSharesResult_{}
}

var ManageNoteSharesResult__Errors_DEFAULT []*ManageNoteSharesError

func (p *ManageNoteSharesResult_) GetErrors() []*ManageNoteSharesError {
	return p.Errors
}
func (p *ManageNoteSharesResult_) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *ManageNoteSharesResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManageNoteSharesResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ManageNoteSharesError, 0, size)
	p.Errors = tSlice
	for i := 0; i < size; i++ {
		_elem48 := &ManageNoteSharesError{}
		if err := _elem48.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem48), err)
		}
		p.Errors = append(p.Errors, _elem48)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManageNoteSharesResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ManageNoteSharesResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManageNoteSharesResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err := oprot.WriteFieldBegin("errors", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errors: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Errors {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errors: ", p), err)
		}
	}
	return err
}

func (p *ManageNoteSharesResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManageNoteSharesResult_(%+v)", *p)
}
